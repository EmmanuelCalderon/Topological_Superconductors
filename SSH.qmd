# SSH model

This code aims to gain an understanding of topological phases of matter and their characterization through the SSH model. To achieve this, we calculate three relevant quantities: the Inverse Ratio Participation (IPR), the entanglement entropy, and Zak's phase.

The Su-Schrieffer-Heeger model was devised by Wu-Pei Su, John Robert Schrieffer, and Alan J. Heeger in 1979 to describe a polyacetylene polymer chain when doped (@SSH_original). The structural diagram of polyacetylene consists of a chain of carbon atoms with two kinds of bonds. This can be described using a tight-binding Hamiltonian of a chain of sites with alternating hoppings between neighbors.

We begin by defining the SSH model using the Python library PythTB, where we vary the intra-cell hopping $t_2$ and set the inter-cell hopping $t_1=1$.

```{python}
from pythtb import *
from pylab import *

lat=[[1.0]]
sites=[[0.0],[0.5]]
# We vary the intra-cell hopping t2 and set the inter-cell hopping t1
t1 = 1
Nt=500
T2 = linspace(0,2,Nt)

SSH_model=[]
for t2 in T2:
  SSH=tb_model(1,1,lat,sites)
  SSH.set_hop(t1,1,0,[1])
  SSH.set_hop(t2,0,1,[0])
  SSH.set_onsite([0,0])
  SSH_model.append(SSH)

SSH_model[1].visualize(0)
```

## Band structure

First, we calculate the SSH band structure for different values of $t_2/t_1$. We can easily observe how the band gap closes when $t_2=t_1$, indicating a phase transition dependent on the ratio $t_2/t_1$.

```{python}
%%capture
Xm = [-0.5]
Xp = [ 0.5]
puntosK = [Xm,[0],Xp]
Ek=[]
for i in range(0,Nt):
  kpts, kdist, knode = SSH_model[i].k_path(puntosK,101,report=True)
  Ek.append(SSH_model[i].solve_all(kpts,eig_vectors=False))
```
```{python}
for i in range(0,Nt,50):
  plt.plot(kdist,Ek[i].T)
  plt.xticks(knode)
  plt.title("$t_2/t_1$="+str(T2[i]),fontsize=10)
  plt.grid(True)
  plt.show()
```

## Finite SSH chain

In order to study this fase transition we now consider a finite SSH chain. 

```{python}
NL=50 # Longitud de cadena
SSH_Cortado=[]
for i in range(Nt):
  SSH_Cortado.append(SSH_model[i].cut_piece(NL,0,glue_edgs=False))
SSH_Cortado[1].visualize(0)
```

In the next cell, we calculate all the eigenstates of the chain. To study the gap closure, we concentrate our attention on the state whose energy is closest to zero.

```{python}
evals,evecs,ed=[],[],[]
for i in range(Nt):
  Ek,evec = SSH_Cortado[i].solve_all(eig_vectors=True)
  evals.append(Ek)
  evecs.append(evec)
  ed.append(SSH_Cortado[i].get_num_orbitals()//2)
evals=np.array(evals)
```

We now visualize the evolution of the state with energy closest to zero when we vary the ratio $t_2/t_1$. We can observe that for $|t_2/t_1|<1$ the state is localized near the edges of the chain and for $|t_2/t_1|\geq1$ this state is now unlocalized. In other words, for $|t_2/t_1|<1$ we observe an edge state and for $|t_2/t_1|\geq1$ it becomes a bulk state.

```{python}
for i in range(0,Nt,50):
  (fig,ax)=SSH_Cortado[i].visualize(0,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)
  ax.set_title("$t_2$="+str(T2[i])+"$t_1$"+"  E="+str(evals[i][ed[i]]))
  ax.set_ylim(-5,5)
```

## IPR

We now aim to understand the evolution of all the eigenstates of the chain. To achieve this, we use the Inverse Ratio Participation (IPR) which is defined as
$$
\begin{equation}
\text{IPR}=\sum_{n=1}^{N} |\psi_n|^4 / \sum_{n=1}^{N} |\psi_n|^2 \label{eq : IPR}
\end{equation}
$$

where $\psi_n$ is the amplitude of the wavefunction in the $n$-th site of the chain, which has $N$ sites. Notice that if we asume $\psi_n$ is normalized, the term in the denominator is equal to 1. 

The IPR is a simple way to quantify how many states a particle is distributed over a system. To see this, suppose that the particle is equally distributed over $M$ sites, i.e., $|\psi_n|^2=\frac{1}{M}$ for $n=1,...,M$ and zero otherwise. In that case, 
$$
\begin{equation}
\text{IPR}=\sum_{n=1}^{N} |\psi_n|^4 = \sum_{n=1}^{M} \frac{1}{M^2} = \frac{1}{M}. \label{eq : IPR-example}
\end{equation}
$$

If we asume that the particle is localized in one state, we see that $\text{IPR}=1$. In contrast, if we asume that the particle is distributed across every state in the system, then $\text{IPR}=1/N$, and in the thermodynamic limit, the IPR would tend to zero. A simple exercise of extremation shows that, assuming $\psi_n$ is normalized, then
$$
\begin{equation}
\frac{1}{N}\leq \text{IPR}\leq 1
\end{equation}
$$

which makes it a good way to measure the localization of a certain state.

In the next cell we calculate the IPR of all the eigenstates of our finite system.

```{python}
IPR=[]
for i in range(Nt):
  IPR.append([])
  for edo in evecs[i]:
    C2=sum(np.absolute(edo)**2)
    C4=sum(np.absolute(edo)**4)
    IPR[i].append(C4/C2)
```

We now graph the evolution of the energy levels as a function of $t_2/t_1$ and we color the graph using the IPR.

```{python}
def colorFader(c1,c2,mix=0): 
    c1=np.array(mpl.colors.to_rgb(c1))
    c2=np.array(mpl.colors.to_rgb(c2))
    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)

def Fader(Lc,mix): # Linear interpolation of colors in Lc
    i=int(np.floor(mix*(len(Lc)-1)))
    if i==len(Lc)-1:
      c1,c2=Lc[-2],Lc[-1]
      return c2
    else:
      c1,c2=Lc[i],Lc[i+1]
      return colorFader(c1,c2,mix*(len(Lc)-1)-i)

Lc=['red','Blue']

fig, ax = plt.subplots(figsize=(7, 6))
for i in range(2*NL): # Número de eigenestados
  colors = []
  for j in range(Nt):
    colors.append(Fader(Lc,IPR[j][i]))
  ax.scatter(T2,evals.T[i],c=colors,s=0.5)
  #ax.set_facecolor("black")
  ax.set_xlabel('t2/t1')
  ax.set_ylabel('E')
fig, ax = plt.subplots(figsize=(7, 1))
n=500
for x in linspace(0,1,n):
    ax.axvline(x, color=Fader(Lc,x), linewidth=4)
    ax.set_xlabel('IPR')
    ax.tick_params(axis='y', which='both', left=False, labelleft=False)
plt.show()
```

We observe the presence of eigenstates with an IPR close to one in the region close to zero when $|t_2/t_1|<1$, indicating the presence of localized eigenstates. For the remaining eigenstates, we observe an IPR very close to zero, suggesting that these are bulk states that we can associate with the Bloch states found when we calculated the band structures. While strictly speaking, in this system, there is no band structure as we have not imposed periodic boundary conditions, considering a long enough chain allows us to approximate the eigenstates of the bulk with the Bloch eigenfunctions of the band structure.

Notice that in the previous example of Eq. $\ref{eq: IPR-example}$, we made no clear specification of the position of the sites in the system to which the particle was distributed. This means that the IPR cannot tell us if the localized eigenstates are edge states. To address this limitation, we turn to the entanglement entropy.

## Entanglement entropy

Consider two systems $S_1$ and $S_2$ described by states $\varphi_1$ and $\varphi_2$ with their respective Hilbert space $\mathcal{H}_1$ and $\mathcal{H}_2$. Then, the compound system $S_1+S_2$ is accurately described by the tensor-product $\mathcal{H}_1\otimes\mathcal{H}_2$ whose basis states are of the form $\varphi_1\otimes\varphi_2$. A state $\psi_0$ is called pure if it can be written as $\psi_0=\varphi_1\otimes\varphi_2$ for some $\varphi_{1/2}\in\mathcal{H}_{1/2}$ and in any other case we call $\psi_0$ an entangled state. For example $\psi_0=\varphi_1\otimes\varphi_2+\psi_1\otimes\psi_2$ is in general an entangled state.

Consider an 

The entanglement entropy (or entropy of entanglement) is a measure 

Primero calculamos los eigenvalores de la matriz de correlaciones como indica el articulo de Ryu y Hatsugai (@Ryu_2006). Observamos como existen dos eigenvalores del hamiltoniano $C$ cercanos a $1/2$, lo que indica la presencia de estados de borde. Vemos como estos estados desaparecen para $t_2/t_1>1$.

```{python}
def C_Spectre(model):
  Ek,evec=model.solve_all(eig_vectors=True)
  nF=model.get_num_orbitals()//2 # Sist de 2 niveles
  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)
  C=P[0:nF,0:nF]
  ζ=list(sort(np.linalg.eigvals(C)))
  return ζ

ζ=np.array(list(map(C_Spectre,SSH_Cortado)))
```
```{python}
fig, ax = plt.subplots(figsize=(7, 6))
for L in ζ.T:
  ax.scatter(T2,L,s=1,c='black')
  ax.set_ylim(-0.1,1.1)
  ax.set_xlabel('$t_2/t_1$')
  ax.set_ylabel('Espectro de $C$')
  ax.grid(True)
```

Calculamos la entropía de entrelazamiento usando los eigenvalores del hamiltoniano C por medio de la formula.
$$
S_A=-\sum_{\ell}(\zeta_\ell \log(\zeta_\ell) + (1-\zeta_\ell)\log(1-\zeta_\ell)) 
$$

Claro que aquí nos aprovechamos de la simetría quiral del sistema, por lo que podemos calcular de forma equivalente
$$
S_A=-2\sum_{\zeta_\ell\geq0.5} (\zeta_\ell \log(\zeta_\ell) + (1-\zeta_\ell)\log(1-\zeta_\ell)).
$$

```{python}
def EEntropy(model):
  Ek,evec=model.solve_all(eig_vectors=True)
  nF=model.get_num_orbitals()//2 #sum([1 for ϵ in Ek if ϵ<0]) # Numero de estados en mar de Fermi
  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)
  C=P[0:nF,0:nF]
  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Aqui es necesario sim.quiral
  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # Quitamos los que no contribuyen
  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))
  return 2*SEE

See=list(map(EEntropy,SSH_Cortado))
```
```{python}
fig, ax = plt.subplots(figsize=(7, 6))
ax.plot(T2,See,c='black')
ax.set_xlabel('$t_2/t_1$')
ax.axhline(2*np.log(2),c='red')
ax.set_ylabel('Entropia de entrelazamiento $S_A$')
ax.grid(True)
```

De acuerdo con Ryu y Hatsugai, la entropía de entrelazamiento en el limite termodinamico es $\log 2 \times$ el número de fronteras del sistema. En este caso vemos como la entropía de entrelazamiento baja por debajo de la cota inferior de $2\log 2$ alrededor de $t_2=0.5 t_1$ lo que indica que los estados de borde en ambos extremos de la cadena desaparecen en este limite. 
