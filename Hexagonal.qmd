# 2D topological systems

New objectives: Programs for Z2 invariant and Chern number. Keep on checking IPR and EE.


## Haldane model

We begin by constructing the Haldane model for graphene.

```{python}
from pythtb import *
from pylab import *

a1=np.array([3/2,-sqrt(3)/2])
a2=np.array([3/2,sqrt(3)/2])

lat=np.array([a1,a2])
orb=[[1/3,1/3],[2/3,2/3]]

def Haldane_model(t2,phi=0,M=0,tx=1,ty=1,tz=1):

    K2D=tb_model(2,2,lat,orb)
    K2D.set_hop(tx,0,1,[0,0]) 
    K2D.set_hop(ty,1,0,[0,1])
    K2D.set_hop(tz,1,0,[1,0])

    K2D.set_hop(t2*exp(1j*phi),1,1,[-1,0])
    K2D.set_hop(t2*exp(1j*phi),1,1,[0,1])
    K2D.set_hop(t2*exp(1j*phi),1,1,[1,-1])

    K2D.set_hop(t2*exp(-1j*phi),0,0,[-1,0])
    K2D.set_hop(t2*exp(-1j*phi),0,0,[0,1])
    K2D.set_hop(t2*exp(-1j*phi),0,0,[1,-1])
    K2D.set_onsite([M,-M])

    return K2D

Haldane_model(1j,phi=0.5).visualize(1,0,color_hoppings=True)
```
```{python}
Graph_AC_Fin(1j,phi=0.5,M=-1)._nspin
```

```{python}
Graph_AC_Fin(1,phi=pi,M=0.3).visualize(0,1)
```

```{python}
from pythtb import *
from pylab import *

def Graph_AC_Fin(t2,phi,Lx=2,Ly=2,M=0,tx=1,ty=1,tz=1):
  a1=np.array([3/2,-sqrt(3)/2])
  a2=np.array([3/2,sqrt(3)/2])

  lat=np.array([a1,a2])
  orb=[[1/3,1/3],[2/3,2/3]]

  K2D=tb_model(2,2,lat,orb)
  K2D.set_hop(tx,0,1,[0,0]) 
  K2D.set_hop(ty,1,0,[0,1])
  K2D.set_hop(tz,1,0,[1,0])

  K2D.set_hop(t2*exp(1j*phi),1,1,[-1,0])
  K2D.set_hop(t2*exp(1j*phi),1,1,[0,1])
  K2D.set_hop(t2*exp(1j*phi),1,1,[1,-1])

  K2D.set_hop(t2*exp(1j*phi),0,0,[1,0])
  K2D.set_hop(t2*exp(1j*phi),0,0,[0,-1])
  K2D.set_hop(t2*exp(1j*phi),0,0,[-1,1])
  K2D.set_onsite([M,-M])

  K2D = K2D.make_supercell([[1,-2],[1,1]])

  return K2D.cut_piece(Lx,0).cut_piece(Ly,1)

Graph_AC_Fin(1,pi/2,M=0.3).visualize(0,1,color_hoppings=True)
```

```{python}
def Graph_Ribbon_AC(t2,phi,L,M=0,tx=1,ty=1,tz=1):
  a1=np.array([3/2,-sqrt(3)/2])
  a2=np.array([3/2,sqrt(3)/2])

  lat=np.array([a1,a2])
  orb=[[1/3,1/3],[2/3,2/3]]

  K2D=tb_model(2,2,lat,orb)
  K2D.set_hop(tx,0,1,[0,0]) 
  K2D.set_hop(ty,1,0,[0,1])
  K2D.set_hop(tz,1,0,[1,0])

  K2D.set_hop(t2*exp(1j*phi),1,1,[-1,0])
  K2D.set_hop(t2*exp(1j*phi),1,1,[0,1])
  K2D.set_hop(t2*exp(1j*phi),1,1,[1,-1])

  K2D.set_hop(t2*exp(1j*phi),0,0,[1,0])
  K2D.set_hop(t2*exp(1j*phi),0,0,[0,-1])
  K2D.set_hop(t2*exp(1j*phi),0,0,[-1,1])
  K2D.set_onsite([M,-M])

  K2D = K2D.make_supercell([[1,-2],[1,1]])

  return K2D.cut_piece(L,0)

Graph_Ribbon_AC(1.,phi=pi/2,L=3).visualize(0,1)
```

```{python}
from pythtb import *
from pylab import *

def Graph_Ribbon_ZZ(t2,phi,L=2,M=0,tx=1,ty=1,tz=1):
  a1=np.array([3/2,-sqrt(3)/2])
  a2=np.array([3/2,sqrt(3)/2])

  lat=np.array([a1,a2])
  orb=[[1/3,1/3],[2/3,2/3]]

  K2D=tb_model(2,2,lat,orb)
  K2D.set_hop(tx,0,1,[0,0]) 
  K2D.set_hop(ty,1,0,[0,1])
  K2D.set_hop(tz,1,0,[1,0])

  K2D.set_hop(t2*exp(1j*phi),1,1,[-1,0])
  K2D.set_hop(t2*exp(1j*phi),1,1,[0,1])
  K2D.set_hop(t2*exp(1j*phi),1,1,[1,-1])

  K2D.set_hop(t2*exp(1j*phi),0,0,[1,0])
  K2D.set_hop(t2*exp(1j*phi),0,0,[0,-1])
  K2D.set_hop(t2*exp(1j*phi),0,0,[-1,1])
  
  K2D.set_onsite([M,-M])

  K2D = K2D.make_supercell([[1,1],[-1,1]])

  return K2D.cut_piece(L,0)

Graph_Ribbon_ZZ(1,pi/2,L=2).visualize(0,1,color_hoppings=True)
```

```{python}
k = linspace(0,1,101)
Ek = Graph_Ribbon_ZZ(0.1,phi=pi/2,M=0.4,L=100).solve_all(k)
plot(k,Ek.T,c='k',alpha=0.3);
plt.show()
Ek = Graph_Ribbon_AC(0.1,phi=pi/2,M=1.,L=100).solve_all(k)
plot(k,Ek.T,c='k',alpha=0.3);
plt.show()
```

```{python}
phi_path = linspace(0,2*pi,100)
t2_path = linspace(0,2,100)
Ene = [ Graph_AC_Fin(0.1,phi=phi,M=0.2,Lx=10,Ly=5).solve_all() for phi in phi_path]
Ene = np.array(Ene)
```

```{python}
for L in Ene.T:
  plot(phi_path,L,c='k',alpha=0.1)
```



