# Cosas para el futuro

::: {.callout-note appearance="simple" icon=false collapse="true"}
### Chiral symmetry
The underlying idea is that there exists a unitary and hermitian operator $\hat{\Gamma}$ such that 
$$
\hat{\Gamma}\hat{H}\hat{\Gamma}^\gamma = -\hat{H}.
$$ 

For the SSH system one possible $\hat{\Gamma}$ is $\hat\Gamma=\hat{P}_A-\hat{P}_B$ with $\hat{P}_{A/B}$ the projector on the sublatice $A$ (B). 

For the Kitaev chain operator, we can define $C=\sigma_x K$ with $\sigma_x$ the first Pauli matrix. $C$ exchanges the particle sector with the hole sector of the hamiltonian $\mathbfcal{H}(\vb k)$ an results in
$$
C \mathbfcal{H}(\vb k) C^{-1} = -\mathbfcal{H}(-\vb k),
$$

which then implies that
$$
\hat{H}_{\text{Mean Field}} = \frac{1}{2} \sum_{\vb{k},s_1,s_2} \begin{pmatrix} \hat{c}^\dagger_{\vb k,s_1} & \hat{c}_{-\vb k,s_1} \end{pmatrix} \mathbfcal{H}(\vb k) \begin{pmatrix} \hat{c}^\dagger_{\vb k,s_2} \\ \hat{c}_{-\vb k,s_2} \end{pmatrix}
$$

:::

In this section we begin to study topological superconductivity and 

the model a simple model for a 1D topological superconductor. The Kitaev chain models a 1D p-wave superconductor, that is, a superconductor between spinless fermions. 

## Superconductivity


 Its hamiltonian consists of a spinless fermions on 1-D metal:
$$
H=\sum_p c_p^\dagger \left( \frac{p^2}{2m} -\mu \right) c_p
$$

Adding a $p$-wave pairing potential

$$
H_\Delta = \frac{1}{2} (\Delta c^\dagger_p c^\dagger_{-p}+\Delta^\ast p)
$$


```{python}
from pythtb import *
from pylab import *

# Kitaev Chain

lat=[[1.0,0.0],[0.0,1.0]]
orb=[[0.0,-1.0],[0.,1.0]]

t = 1
Δ = 0.1
Nμ=300
KitaevChain=[]
M=np.linspace(-3*t, 3*t, num=Nμ)
for μ in M:
  KC=tb_model(1,2,lat,orb,per=[0])
  KC.set_hop(-t,0,0,[1,0]) 
  KC.set_hop(t,1,1,[1,0])
  KC.set_hop(-Δ,0,1,[1,0])
  KC.set_hop( Δ,0,1,[-1,0])
  KC.set_onsite([-μ,μ])
  KitaevChain.append(KC)

KitaevChain[1].visualize(0,1)
```


## Band structure

```{python}
%%capture
Xm = [-0.5]
Xp = [ 0.5]
puntosK = [Xm,[0],Xp]
Ek=[]
for i in range(Nμ):
  kpts, kdist, knode = KitaevChain[i].k_path(puntosK,101,report=True)
  Ek.append(KitaevChain[i].solve_all(kpts,eig_vectors=False))
```

```{python}
import plotly.graph_objects as go
cuadros = []
for i in range(Nμ):
    cuadros.append( go.Frame(data=[go.Scatter(x=list(kdist), y=Ek[i][0],mode="lines"),
                                   go.Scatter(x=list(kdist), y=Ek[i][1],line=dict(color='firebrick'),mode="lines")],
                             layout=go.Layout(title=f"μ/t={M[i]:.2f}" ) ))

fig = go.Figure(
    data=[go.Scatter(x=kdist, y=Ek[0][0],  mode="lines",name="Valence band"),
          go.Scatter(x=kdist, y=Ek[0][1],mode="lines",line=dict(color='firebrick'),name="Conductance band")],
    layout=go.Layout(
        title=f"μ/t={M[0]:.2f}",
        xaxis_title="Reduced k-vector",
        yaxis_title="E(k)",
        updatemenus=[dict(type="buttons",
                          x=1.0,y=.8,
                          buttons=[dict(label="Play",
                                        method="animate",
                                        args=[None,
                                        dict(frame=dict(duration=30,redraw=True),
                                        transition=dict(duration=0,easing=None))] )])]

    ),
    frames = cuadros
)

fig.show()
```

## Visualization of edge states

```{python}
NL=10
KC_cut=[KitaevChain[i].cut_piece(NL,0,glue_edgs=False) for i in range(Nμ)]
KC_cut[1].visualize(0,1)
```

```{python}
evals,evecs,ed=[],[],[]
for i in range(Nμ):
  Ek,evec=KC_cut[i].solve_all(eig_vectors=True)
  evals.append(Ek)
  evecs.append(evec)
  ed.append(KC_cut[i].get_num_orbitals()//2) 
evals=np.array(evals)
```


```{python}
import plotly.graph_objects as go
cuadros = []
for i in range(Nμ):
    cuadros.append( go.Frame(data=[go.Scatter(x=list(range(NL)), y=abs(evecs[i][ed[i],:][::2])**2,mode="lines"),
    go.Scatter(x=list(range(NL)), y=abs(evecs[i][ed[i],:][1::2])**2,mode="lines")],
                             layout=go.Layout(title=f"μ/t={M[i]:.2f}" ) ))

fig = go.Figure(
     data=[go.Scatter(x=list(range(NL)), y=abs(evecs[0][ed[0],:][::2])**2, name="Electron distribution", mode="lines"),
    go.Scatter(x=list(range(NL)), y=abs(evecs[0][ed[0],:][1::2])**2,name="Hole distribution",  mode="lines")],
    layout=go.Layout(
        title=f"μ/t={M[0]:.2f}",
        xaxis_title="n",
        yaxis_title=r"|ψn|^2",
        updatemenus=[dict(type="buttons",
                          x=1.0,y=.9,
                          buttons=[dict(label="Play",
                                        method="animate",
                                        args=[None,
                                        dict(frame=dict(duration=30,redraw=True),
                                        transition=dict(duration=0,easing=None))] )])]

    ),
    frames = cuadros
)

fig.update_xaxes(range=[0,NL])
fig.show()

```

## Energy levels v.s. $\mu/t$

```{python}
def ipr(edo):
  abs=np.absolute(edo)**2
  C2=sum(abs**2)
  C4=sum(abs**4)
  return C4/C2
 
def colorFader(c1,c2,mix=0): # linear interpolation of color c1 (mix=0) to color c2 (mix=1)
    c1=np.array(mpl.colors.to_rgb(c1))
    c2=np.array(mpl.colors.to_rgb(c2))
    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)

def Fader(Lc,mix):  
    i=int(np.floor(mix*(len(Lc)-1)))
    if i==len(Lc)-1:
      c1,c2=Lc[-2],Lc[-1]
      return c2
    else:
      c1,c2=Lc[i],Lc[i+1]
      return colorFader(c1,c2,mix*(len(Lc)-1)-i)

IPR=[list(map(ipr,evecs[i])) for i in range(Nμ)]

Lc=['Cyan','Blue','Red']
fig, ax = plt.subplots(figsize=(7, 6))
Max=np.max(np.max(IPR))
Min=np.min(np.min(IPR))
for i in range(2*NL): 
  colors = []
  for j in range(Nμ):
    colors.append(Fader(Lc,(IPR[j][i]-Min)/(Max-Min)))
  ax.scatter(M,evals.T[i],c=colors,s=0.5)
  ax.set_xlabel('$\mu/t$')
  ax.set_ylabel('E')
fig, ax = plt.subplots(figsize=(7, 1))
n=500
for x in linspace(0,1,n):
    ax.axvline((Max-Min)*x+Min, color=Fader(Lc,x), linewidth=4)
    ax.set_xlabel('IPR')
    ax.set_xlim(Min,Max)
    ax.tick_params(axis='y', which='both', left=False, labelleft=False)
plt.show()
```

## $C$-Hamiltonian

```{python}
def C_Spectre(model):
  Ek,evec=model.solve_all(eig_vectors=True)
  nF=model.get_num_orbitals()//2 # 2 level system
  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)
  C=P[0:nF,0:nF]
  ζ=list(sort(np.linalg.eigvals(C)))
  return ζ

ζ=np.array(list(map(C_Spectre,KC_cut)))

fig, ax = plt.subplots(figsize=(7, 6))
for L in ζ.T:
  ax.scatter(M,L,c='black',s=1)
  ax.set_ylim(-0.1,1.1)
  ax.set_xlabel('$\mu/t$')
  ax.set_ylabel('$C$ Spectre')
  ax.grid(True)
```


## Entanglement entropy

```{python}
def EEntropy(model):
  Ek,evec=model.solve_all(eig_vectors=True)
  nF=model.get_num_orbitals()//2 # Number of states on the Fermi sea
  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)
  C=P[0:nF,0:nF]
  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Here we use chiral symmetry
  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # We remove the eigenvalues that don't contribute
  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))
  return 2*SEE
 
See=list(map(EEntropy,KC_cut))

fig, ax = plt.subplots(figsize=(7, 6))
ax.scatter(M,See,s=1,c='black')
ax.set_xlabel('$\mu/t$')
ax.axhline(2*np.log(2),c='red')
ax.set_ylabel('Entropy of Entanglement $S_A$')
ax.set_ylim(0.5,1.8)
ax.grid(True)
```

## Zak Phase

```{python}
def Ham_Kitaev_Chain(mu,t,delta):
    def H(k):
        H = np.array([[           -2*t*np.cos(k)-mu, -2j*delta*sin(k)],
                      [ 2j*delta*sin(k),              2*t*np.cos(k)+mu]])
        return H
    return H

def Zak(H):  
    kpath = np.linspace(-pi,pi,100,endpoint=False)
    Ek,vk = eig(H(kpath[-1]))
    uN    = vk.T[Ek<0]
    Ek,vk = eig(H(kpath[0]))
    u0    = vk.T[Ek<0]
    Prod  = np.vdot(uN,u0)
    un1   = u0
    for k in kpath[1:]:
        Ek,vk = eig(H(k))
        un   = vk.T[Ek<0]
        Prod  = Prod*np.vdot(un1,un)
        un1   = un
    ϕ = -imag( log(Prod) )
    if(ϕ<-10**(-10)): ϕ=ϕ+2*np.pi  
    return ϕ


mu_path=np.linspace(-3,3,300)
Lzak=[Zak(Ham_Kitaev_Chain(mu,1,0.1)) for mu in mu_path]

fig, ax = plt.subplots(figsize=(7, 6))
ax.plot(mu_path,Lzak,c='green')
ax.set_xlabel('$t_2/t_1$')
ax.set_ylabel('Zak phase')
ax.grid(True)
```

