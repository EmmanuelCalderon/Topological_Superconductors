[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Topological_Superconductors",
    "section": "",
    "text": "Preface\nIn this website we present a series of codes designed to study topological superconductors.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the\nBerry Phase in the Solid State.” Physical Review B 73\n(24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in\nPolyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701.\nhttps://doi.org/10.1103/PhysRevLett.42.1698.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html",
    "href": "Kitaev_Chain.html",
    "title": "3  Cadena de Kitaev",
    "section": "",
    "text": "3.1 Estructura de bandas\n%%capture\nXm = [-0.5]\nXp = [ 0.5]\npuntosK = [Xm,[0],Xp]\nEk=[]\nfor i in range(Nμ):\n  kpts, kdist, knode = KitaevChain[i].k_path(puntosK,101,report=True)\n  Ek.append(KitaevChain[i].solve_all(kpts,eig_vectors=False))\nfor i in range(0,Nμ,20):\n  fig,ax=plt.subplots(figsize=(5, 4))\n  ax.plot(kdist,Ek[i].T)\n  ax.set_xticks(knode)\n  ax.set_title(\"μ=\"+str(M[i]),fontsize=10)\n  ax.grid(True)\n  ax.set_xticklabels([\"-π\",0,\"π\"])\n\nC:\\Users\\gozu0\\AppData\\Local\\Temp\\ipykernel_10676\\1760376919.py:2: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig,ax=plt.subplots(figsize=(5, 4))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#fase-de-zak",
    "href": "Kitaev_Chain.html#fase-de-zak",
    "title": "3  Cadena de Kitaev",
    "section": "3.2 Fase de Zak",
    "text": "3.2 Fase de Zak\n\ndef Zak_Ph(model):\n  Nk=500\n  ptsK=[[0.],[1.]] # Debe ser la 1ZB\n  kpts, kdist, knode = model.k_path(ptsK,Nk,report=False)\n  ϵk,evec=model.solve_all(kpts,eig_vectors=True)\n  Zak=[]\n  for band in range(len(evec)):\n    eveb=evec[band]\n    Prod=prod([ np.vdot(eveb[i-1],eveb[i]) for i in range(1,Nk)])\n    Zak.append(-imag( np.log(Prod) ))\n  return Zak\n\n\nPhZak=list(map(Zak_Ph,KitaevChain))\nPhZak=np.array(PhZak)\n\n\nfig, (ax1,ax2) = plt.subplots(2,figsize=(8, 8))\n\nax1.plot(M,PhZak.T[0])\nax1.set_xlabel('$\\mu/t$')\nax1.set_ylabel('Fase de Zak \\n (banda valencia)')\nax1.grid(True)\n\nax2.plot(M,PhZak.T[1])\nax2.set_xlabel('$\\mu/t$')\nax2.set_ylabel('Fase de Zak \\n (banda conducción)')\nax2.grid(True)\nax2.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#estados-de-borde",
    "href": "Kitaev_Chain.html#estados-de-borde",
    "title": "3  Cadena de Kitaev",
    "section": "3.3 Estados de borde",
    "text": "3.3 Estados de borde\n\nNL=50\nKC_Cortado=[KitaevChain[i].cut_piece(NL,0,glue_edgs=False) for i in range(Nμ)]\nKC_Cortado[1].visualize(0,1)\n\n\n\n\n\n\n\n\n\n# Obtenemos todos los estados\nevals,evecs,ed=[],[],[]\nfor i in range(Nμ):\n  Ek,evec=KC_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(KC_Cortado[i].get_num_orbitals()//2) # Energia al centro del espectro, debe corresponder con el edo de borde\nevals=np.array(evals)\n\n\ndef ipr(edo):\n  abs=np.absolute(edo)**2\n  C2=sum(abs**2)\n  C4=sum(abs**4)\n  return C4/C2\n\n\nIPR=[list(map(ipr,evecs[i])) for i in range(Nμ)]\n\n# Mostramos estados de borde\nfor i in range(0,Nμ,20):\n  (fig,ax)=KC_Cortado[i].visualize(0,1,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"μ=\"+str(M[i])+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\pythtb.py:734: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig=plt.figure(figsize=[plt.rcParams[\"figure.figsize\"][0],",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#espectro-v.s.-mut",
    "href": "Kitaev_Chain.html#espectro-v.s.-mut",
    "title": "3  Cadena de Kitaev",
    "section": "3.4 Espectro v.s. \\(\\mu/t\\)",
    "text": "3.4 Espectro v.s. \\(\\mu/t\\)\n\ndef colorFader(c1,c2,mix=0): # Interpolación lineal del color c1 (en mix=0) al color c2 (mix=1)\n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Interpolación lineal de colores en lista Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\nfig, ax = plt.subplots(figsize=(10, 8))\nMax=np.max(np.max(IPR))\nMin=np.min(np.min(IPR))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nμ):\n    colors.append(Fader(Lc,(IPR[j][i]-Min)/(Max-Min)))\n  ax.scatter(M,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(10, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline((Max-Min)*x+Min, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.set_xlim(Min,Max)\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C)) # Hay que mejorar esta parte\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # Quitamos los que no contribuyen\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return SEE\n\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))\n  return ζ\n\n\nSee=list(map(EEntropy,KC_Cortado))\n\n\nfig, ax = plt.subplots(figsize=(9, 7))\nax.plot(M,See,c='black')\nax.set_xlabel('$\\mu/t$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entropia de entrelazamiento $S_A$')\nax.grid(True)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning: Casting complex values to real discards the imaginary part\n  return math.isfinite(val)\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1345: ComplexWarning: Casting complex values to real discards the imaginary part\n  return np.asarray(x, float)\n\n\n\n\n\n\n\n\n\n\nζ=np.array(list(map(C_Spectre,KC_Cortado)))\n\n\nfig, ax = plt.subplots(figsize=(10, 8))\nfor L in ζ.T:\n  ax.plot(M,L)\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('Espectro de $C$')\n  ax.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "SSH.html",
    "href": "SSH.html",
    "title": "2  SSH model",
    "section": "",
    "text": "2.1 Band structure\nFirst, we calculate the SSH band structure for different values of \\(t_2/t_1\\). We can easily observe how the band gap closes when \\(t_2=t_1\\), indicating a phase transition dependent on the ratio \\(t_2/t_1\\).\n%%capture\nXm = [-0.5]\nXp = [ 0.5]\npuntosK = [Xm,[0],Xp]\nEk=[]\nfor i in range(0,Nt):\n  kpts, kdist, knode = SSH_model[i].k_path(puntosK,101,report=True)\n  Ek.append(SSH_model[i].solve_all(kpts,eig_vectors=False))\nfor i in range(0,Nt,50):\n  plt.plot(kdist,Ek[i].T)\n  plt.xticks(knode)\n  plt.title(\"$t_2/t_1$=\"+str(T2[i]),fontsize=10)\n  plt.grid(True)\n  plt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#zaks-phase",
    "href": "SSH.html#zaks-phase",
    "title": "2  SSH model",
    "section": "2.2 Zak’s phase",
    "text": "2.2 Zak’s phase\nIn order to characterize a topological phase of matter we must associate it a topological invariant. One possible topololgical invariant is Zak’s phase which is defined as the Berry phase of a particle that traverses the reciprocal space \\(k\\) from 0 to \\(2\\pi\\), that is \\[\n\\phi=\n\\]\n\ndef Zak_Ph(model):\n  Nk=100\n  ptsK=[[0.],[1.]] # 1ZB\n  kpts, kdist, knode = model.k_path(ptsK,Nk,report=False)\n  ϵk,evec=model.solve_all(kpts,eig_vectors=True)\n  Zak=[]\n  for band in range(len(evec)):\n    eveb=evec[band]\n    Prod=prod([ np.vdot(eveb[i-1],eveb[i]) for i in range(1,Nk)])\n    Zak.append(-imag( np.log(Prod) ))\n  return Zak\n\n\n%%capture\nPhZak=list(map(Zak_Ph,SSH_model))\nPhZak=np.array(PhZak)\n\n\nfig, (ax1,ax2) = plt.subplots(2,figsize=(8, 8))\nax1.plot(T2,PhZak.T[0])\nax1.set_xlabel('$t_2/t_1$')\nax1.set_ylabel('Fase de Zak \\n (banda valencia)')\nax1.grid(True)\nax2.plot(T2,PhZak.T[1])\nax2.set_xlabel('$t_2/t_1$')\nax2.set_ylabel('Fase de Zak \\n (banda conducción)')\nax2.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#finite-ssh-chain",
    "href": "SSH.html#finite-ssh-chain",
    "title": "2  SSH model",
    "section": "2.2 Finite SSH chain",
    "text": "2.2 Finite SSH chain\nIn order to study this fase transition we now consider a finite SSH chain.\n\nNL=50 # Longitud de cadena\nSSH_Cortado=[]\nfor i in range(Nt):\n  SSH_Cortado.append(SSH_model[i].cut_piece(NL,0,glue_edgs=False))\nSSH_Cortado[1].visualize(0)\n\n\n\n\n\n\n\n\nIn the next cell, we calculate all the eigenstates of the chain. To study the gap closure, we concentrate our attention on the state whose energy is closest to zero.\n\nevals,evecs,ed=[],[],[]\nfor i in range(Nt):\n  Ek,evec = SSH_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(SSH_Cortado[i].get_num_orbitals()//2)\nevals=np.array(evals)\n\nWe now visualize the evolution of the state with energy closest to zero when we vary the ratio \\(t_2/t_1\\). We can observe that for \\(|t_2/t_1|&lt;1\\) the state is localized near the edges of the chain and for \\(|t_2/t_1|\\geq1\\) this state is now unlocalized. In other words, for \\(|t_2/t_1|&lt;1\\) we observe an edge state and for \\(|t_2/t_1|\\geq1\\) it becomes a bulk state.\n\nfor i in range(0,Nt,50):\n  (fig,ax)=SSH_Cortado[i].visualize(0,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"$t_2$=\"+str(T2[i])+\"$t_1$\"+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#ipr",
    "href": "SSH.html#ipr",
    "title": "2  SSH model",
    "section": "2.3 IPR",
    "text": "2.3 IPR\nWe now aim to understand the evolution of all the eigenstates of the chain. To achieve this, we use the Inverse Ratio Participation (IPR) which is defined as \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 / \\sum_{n=1}^{N} |\\psi_n|^2 \\label{eq : IPR}\n\\end{equation}\n\\]\nwhere \\(\\psi_n\\) is the amplitude of the wavefunction in the \\(n\\)-th site of the chain, which has \\(N\\) sites. Notice that if we asume \\(\\psi_n\\) is normalized, the term in the denominator is equal to 1.\nThe IPR is a simple way to quantify how many states a particle is distributed over a system. To see this, suppose that the particle is equally distributed over \\(M\\) sites, i.e., \\(|\\psi_n|^2=\\frac{1}{M}\\) for \\(n=1,...,M\\) and zero otherwise. In that case, \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 = \\sum_{n=1}^{M} \\frac{1}{M^2} = \\frac{1}{M}. \\label{eq : IPR-example}\n\\end{equation}\n\\]\nIf we asume that the particle is localized in one state, we see that \\(\\text{IPR}=1\\). In contrast, if we asume that the particle is distributed across every state in the system, then \\(\\text{IPR}=1/N\\), and in the thermodynamic limit, the IPR would tend to zero. A simple exercise of extremation shows that, assuming \\(\\psi_n\\) is normalized, then \\[\n\\begin{equation}\n\\frac{1}{N}\\leq \\text{IPR}\\leq 1\n\\end{equation}\n\\]\nwhich makes it a good way to measure the localization of a certain state.\nIn the next cell we calculate the IPR of all the eigenstates of our finite system.\n\nIPR=[]\nfor i in range(Nt):\n  IPR.append([])\n  for edo in evecs[i]:\n    C2=sum(np.absolute(edo)**2)\n    C4=sum(np.absolute(edo)**4)\n    IPR[i].append(C4/C2)\n\nWe now graph the evolution of the energy levels as a function of \\(t_2/t_1\\) and we color the graph using the IPR.\n\ndef colorFader(c1,c2,mix=0): \n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Linear interpolation of colors in Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nt):\n    colors.append(Fader(Lc,IPR[j][i]))\n  ax.scatter(T2,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('t2/t1')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(7, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline(x, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe observe the presence of eigenstates with an IPR close to one in the region close to zero when \\(|t_2/t_1|&lt;1\\), indicating the presence of localized eigenstates. For the remaining eigenstates, we observe an IPR very close to zero, suggesting that these are bulk states that we can associate with the Bloch states found when we calculated the band structures. While strictly speaking, in this system, there is no band structure as we have not imposed periodic boundary conditions, considering a long enough chain allows us to approximate the eigenstates of the bulk with the Bloch eigenfunctions of the band structure.\nNotice that in the previous example of Eq. \\(\\ref{eq: IPR-example}\\), we made no clear specification of the position of the sites in the system to which the particle was distributed. This means that the IPR cannot tell us if the localized eigenstates are edge states. To address this limitation, we turn to the entanglement entropy.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#entanglement-entropy",
    "href": "SSH.html#entanglement-entropy",
    "title": "2  SSH model",
    "section": "2.4 Entanglement entropy",
    "text": "2.4 Entanglement entropy\nConsider two systems \\(S_1\\) and \\(S_2\\) described by states \\(\\varphi_1\\) and \\(\\varphi_2\\) with their respective Hilbert space \\(\\mathcal{H}_1\\) and \\(\\mathcal{H}_2\\). Then, the compound system \\(S_1+S_2\\) is accurately described by the tensor-product \\(\\mathcal{H}_1\\otimes\\mathcal{H}_2\\) whose basis states are of the form \\(\\varphi_1\\otimes\\varphi_2\\). A state \\(\\psi_0\\) is called pure if it can be written as \\(\\psi_0=\\varphi_1\\otimes\\varphi_2\\) for some \\(\\varphi_{1/2}\\in\\mathcal{H}_{1/2}\\) and in any other case we call \\(\\psi_0\\) an entangled state. For example \\(\\psi_0=\\varphi_1\\otimes\\varphi_2+\\psi_1\\otimes\\psi_2\\) is in general an entangled state.\nConsider an\nThe entanglement entropy (or entropy of entanglement) is a measure\nPrimero calculamos los eigenvalores de la matriz de correlaciones como indica el articulo de Ryu y Hatsugai (Ryu and Hatsugai (2006)). Observamos como existen dos eigenvalores del hamiltoniano \\(C\\) cercanos a \\(1/2\\), lo que indica la presencia de estados de borde. Vemos como estos estados desaparecen para \\(t_2/t_1&gt;1\\).\n\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # Sist de 2 niveles\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=list(sort(np.linalg.eigvals(C)))\n  return ζ\n\nζ=np.array(list(map(C_Spectre,SSH_Cortado)))\n\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor L in ζ.T:\n  ax.scatter(T2,L,s=1,c='black')\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$t_2/t_1$')\n  ax.set_ylabel('Espectro de $C$')\n  ax.grid(True)\n\n\n\n\n\n\n\n\nCalculamos la entropía de entrelazamiento usando los eigenvalores del hamiltoniano C por medio de la formula. \\[\nS_A=-\\sum_{\\ell}(\\zeta_\\ell \\log(\\zeta_\\ell) + (1-\\zeta_\\ell)\\log(1-\\zeta_\\ell))\n\\]\nClaro que aquí nos aprovechamos de la simetría quiral del sistema, por lo que podemos calcular de forma equivalente \\[\nS_A=-2\\sum_{\\zeta_\\ell\\geq0.5} (\\zeta_\\ell \\log(\\zeta_\\ell) + (1-\\zeta_\\ell)\\log(1-\\zeta_\\ell)).\n\\]\n\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 #sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Aqui es necesario sim.quiral\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # Quitamos los que no contribuyen\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return 2*SEE\n\nSee=list(map(EEntropy,SSH_Cortado))\n\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.plot(T2,See,c='black')\nax.set_xlabel('$t_2/t_1$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entropia de entrelazamiento $S_A$')\nax.grid(True)\n\n\n\n\n\n\n\n\nDe acuerdo con Ryu y Hatsugai, la entropía de entrelazamiento en el limite termodinamico es \\(\\log 2 \\times\\) el número de fronteras del sistema. En este caso vemos como la entropía de entrelazamiento baja por debajo de la cota inferior de \\(2\\log 2\\) alrededor de \\(t_2=0.5 t_1\\) lo que indica que los estados de borde en ambos extremos de la cadena desaparecen en este limite.\n\n\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the Berry Phase in the Solid State.” Physical Review B 73 (24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in Polyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701. https://doi.org/10.1103/PhysRevLett.42.1698.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  }
]