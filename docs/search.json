[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Topological Phases of Matter",
    "section": "",
    "text": "Preface\nIn this website we present a series of codes designed to study topological matter.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Annett, J F. 2004. Superconductivity,\nsuperfluids and condensates. Oxford Master Series in\nCondensed Matter Physics. Oxford: Oxford Univ. Press. https://cds.cern.ch/record/730995.\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the\nBerry Phase in the Solid State.” Physical Review B 73\n(24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSato, Masatoshi, and Yoichi Ando. 2017. “Topological\nSuperconductors: A Review.” Reports on Progress in\nPhysics 80 (7): 076501.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in\nPolyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701.\nhttps://doi.org/10.1103/PhysRevLett.42.1698.\n\n\nVanderbilt, David. 2018. Berry Phases in Electronic Structure\nTheory. First. Cambdridge University Press. https://doi.org/10.1017/9781316662205.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html",
    "href": "Kitaev_Chain.html",
    "title": "2  Kitaev chain",
    "section": "",
    "text": "2.1 Superconductivity\nIts hamiltonian consists of a spinless fermions on 1-D metal: \\[\nH=\\sum_p c_p^\\dagger \\left( \\frac{p^2}{2m} -\\mu \\right) c_p\n\\]\nAdding a \\(p\\)-wave pairing potential\n\\[\nH_\\Delta = \\frac{1}{2} (\\Delta c^\\dagger_p c^\\dagger_{-p}+\\Delta^\\ast p)\n\\]\nCode\nfrom pythtb import *\nfrom pylab import *\n\n# Kitaev Chain\n\nlat=[[1.0,0.0],[0.0,1.0]]\norb=[[0.0,-1.0],[0.,1.0]]\n\nt = 1\nΔ = 0.1\nNμ=300\nKitaevChain=[]\nM=np.linspace(-3*t, 3*t, num=Nμ)\nfor μ in M:\n  KC=tb_model(1,2,lat,orb,per=[0])\n  KC.set_hop(-t,0,0,[1,0]) \n  KC.set_hop(t,1,1,[1,0])\n  KC.set_hop(-Δ,0,1,[1,0])\n  KC.set_hop( Δ,0,1,[-1,0])\n  KC.set_onsite([-μ,μ])\n  KitaevChain.append(KC)\n\nKitaevChain[1].visualize(0,1)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#fase-de-zak",
    "href": "Kitaev_Chain.html#fase-de-zak",
    "title": "3  Cadena de Kitaev",
    "section": "3.2 Fase de Zak",
    "text": "3.2 Fase de Zak\n\n\nCode\ndef Zak_Ph(model):\n  Nk=500\n  ptsK=[[0.],[1.]] # Debe ser la 1ZB\n  kpts, kdist, knode = model.k_path(ptsK,Nk,report=False)\n  ϵk,evec=model.solve_all(kpts,eig_vectors=True)\n  Zak=[]\n  for band in range(len(evec)):\n    eveb=evec[band]\n    Prod=prod([ np.vdot(eveb[i-1],eveb[i]) for i in range(1,Nk)])\n    Zak.append(-imag( np.log(Prod) ))\n  return Zak\n\n\n\n\nCode\nPhZak=list(map(Zak_Ph,KitaevChain))\nPhZak=np.array(PhZak)\n\n\n\n\nCode\nfig, (ax1,ax2) = plt.subplots(2,figsize=(8, 8))\n\nax1.plot(M,PhZak.T[0])\nax1.set_xlabel('$\\mu/t$')\nax1.set_ylabel('Fase de Zak \\n (banda valencia)')\nax1.grid(True)\n\nax2.plot(M,PhZak.T[1])\nax2.set_xlabel('$\\mu/t$')\nax2.set_ylabel('Fase de Zak \\n (banda conducción)')\nax2.grid(True)\nax2.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#estados-de-borde",
    "href": "Kitaev_Chain.html#estados-de-borde",
    "title": "3  Cadena de Kitaev",
    "section": "3.3 Estados de borde",
    "text": "3.3 Estados de borde\n\n\nCode\nNL=50\nKC_Cortado=[KitaevChain[i].cut_piece(NL,0,glue_edgs=False) for i in range(Nμ)]\nKC_Cortado[1].visualize(0,1)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Obtenemos todos los estados\nevals,evecs,ed=[],[],[]\nfor i in range(Nμ):\n  Ek,evec=KC_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(KC_Cortado[i].get_num_orbitals()//2) # Energia al centro del espectro, debe corresponder con el edo de borde\nevals=np.array(evals)\n\n\n\n\nCode\ndef ipr(edo):\n  abs=np.absolute(edo)**2\n  C2=sum(abs**2)\n  C4=sum(abs**4)\n  return C4/C2\n\n\n\n\nCode\nIPR=[list(map(ipr,evecs[i])) for i in range(Nμ)]\n\n# Mostramos estados de borde\nfor i in range(0,Nμ,20):\n  (fig,ax)=KC_Cortado[i].visualize(0,1,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"μ=\"+str(M[i])+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)\n\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\pythtb.py:734: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig=plt.figure(figsize=[plt.rcParams[\"figure.figsize\"][0],",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#espectro-v.s.-mut",
    "href": "Kitaev_Chain.html#espectro-v.s.-mut",
    "title": "3  Cadena de Kitaev",
    "section": "3.4 Espectro v.s. \\(\\mu/t\\)",
    "text": "3.4 Espectro v.s. \\(\\mu/t\\)\n\n\nCode\ndef colorFader(c1,c2,mix=0): # Interpolación lineal del color c1 (en mix=0) al color c2 (mix=1)\n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Interpolación lineal de colores en lista Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\nfig, ax = plt.subplots(figsize=(10, 8))\nMax=np.max(np.max(IPR))\nMin=np.min(np.min(IPR))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nμ):\n    colors.append(Fader(Lc,(IPR[j][i]-Min)/(Max-Min)))\n  ax.scatter(M,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(10, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline((Max-Min)*x+Min, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.set_xlim(Min,Max)\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C)) # Hay que mejorar esta parte\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # Quitamos los que no contribuyen\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return SEE\n\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))\n  return ζ\n\n\n\n\nCode\nSee=list(map(EEntropy,KC_Cortado))\n\n\n\n\nCode\nfig, ax = plt.subplots(figsize=(9, 7))\nax.plot(M,See,c='black')\nax.set_xlabel('$\\mu/t$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entropia de entrelazamiento $S_A$')\nax.grid(True)\n\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning: Casting complex values to real discards the imaginary part\n  return math.isfinite(val)\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1345: ComplexWarning: Casting complex values to real discards the imaginary part\n  return np.asarray(x, float)\n\n\n\n\n\n\n\n\n\n\n\nCode\nζ=np.array(list(map(C_Spectre,KC_Cortado)))\n\n\n\n\nCode\nfig, ax = plt.subplots(figsize=(10, 8))\nfor L in ζ.T:\n  ax.plot(M,L)\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('Espectro de $C$')\n  ax.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "SSH.html",
    "href": "SSH.html",
    "title": "1  Topological Phases and the SSH model",
    "section": "",
    "text": "1.1 Finite SSH chain\nIn order to study this fase transition we now consider a finite SSH chain.\nCode\nNL=100 # Longitud de cadena\nSSH_Cortado=[]\nfor i in range(Nt):\n  SSH_Cortado.append(SSH_model[i].cut_piece(NL,0,glue_edgs=False))\nSSH_Cortado[1].visualize(0)\nIn the next cell, we calculate the eigenstates of the chain. To study the gap closure, we concentrate our attention on the state whose energy is closest to zero.\nCode\nevals,evecs,ed=[],[],[]\nfor i in range(Nt):\n  Ek,evec = SSH_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(SSH_Cortado[i].get_num_orbitals()//2)\nevals=np.array(evals)\nWe now visualize the evolution of the state with positive energy closest to zero when we vary the ratio \\(t_2/t_1\\). We can observe that for \\(|t_2/t_1|&lt;1\\) the state is localized near the edges of the chain and for \\(|t_2/t_1|\\geq1\\) this state is now unlocalized. In other words, for \\(|t_2/t_1|&lt;1\\) we observe an edge state and for \\(|t_2/t_1|\\geq1\\) it becomes a bulk state.\nCode\nimport plotly.graph_objects as go\ncuadros = []\nfor i in range(Nt):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(range(2*NL)), y=real(evecs[i][ed[i],:]),mode=\"lines\")],\n                             layout=go.Layout(title=f\"t2/t1={T2[i]:.2f}\" ) ))\n\nfig = go.Figure(\n    data=[go.Scatter(x=list(range(2*NL)), y=real(evecs[0][ed[0],:]),  mode=\"lines\")],\n    layout=go.Layout(\n        title=f\"t2/t1={T2[0]:.2f}\",\n        xaxis_title=\"Site index\",\n        yaxis_title=\"Wave function\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.9,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\n\nfig.update_yaxes(range=[-0.11,0.11])\nfig.update_xaxes(range=[0,2*NL])\n\nfig.show()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological Phases and the SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#zaks-phase",
    "href": "SSH.html#zaks-phase",
    "title": "1  Topological Phases and the SSH model",
    "section": "1.4 Zak’s phase",
    "text": "1.4 Zak’s phase\nIn order to say that this is a topological phase transition we must asociate each phase with a \\(\\textit{topological invariant}\\). A prime example of a topological invariant is the \\(\\textit{Berry phase}\\) also called the \\(\\textit{geometric phase}\\) which is a quantity that describes how a global phase accumulates as some state \\(|\\psi\\rangle\\) is carried around a closed loop in a complex space. For example, if we consider a loop of states \\(\\{|\\psi_0\\rangle, |\\psi_1\\rangle , \\dots , |\\psi_N\\rangle\\}\\) where we set \\(|\\psi_0\\rangle=|\\psi_N\\rangle\\). The Berry phase for this discrete loop is defined as \\[\n\\phi=-\\arg( \\langle\\psi_0|\\psi_1\\rangle \\langle\\psi_1|\\psi_2\\rangle \\cdots \\langle\\psi_{N-1}|\\psi_0\\rangle ).\n\\]\nIt can be easily seen that \\(\\phi\\) is a gauge invariant to the transformation \\(|\\psi_n\\rangle\\rightarrow e^{i \\alpha_n} |\\psi_n\\rangle\\) because the ket \\(|\\psi_n\\rangle\\) will cancel the phase \\(e^{i \\alpha_n}\\) carried by the bra \\(\\langle \\psi_n |\\).\nThe Berry phase has a generalization for a continuous loop of states \\(\\{ |\\psi_\\lambda\\rangle ; \\:\\:\\lambda\\in[0,1] \\}\\) : \\[\n\\phi=\\oint \\langle u_\\lambda| i\\partial_\\lambda u_\\lambda\\rangle \\text{d}\\lambda\n\\]\nA proof of this expression can be found in Vanderbilt (2018).\nHere we will calculate Zak’s phase, which is defined as the Berry phase where \\(\\mathcal{C}\\) is the Brillouin Zone, which means \\[\n\\gamma=\\int_{-\\pi}^{\\pi} \\langle u_k^n| i \\partial_k |u_k^n\\rangle \\text{d} k,\n\\]\nwhere \\(u_k^n\\) is the amplitude of the Bloch wavefunction with crystaline momentum \\(k\\) associated with the \\(n\\)-th band.\n\n\nCode\ndef HamSSH(t1,t2): # We define the SSH hamiltonian in k space\n    def H(k):\n        H = np.array([[            0, t2+t1*exp(-1J*k)],\n                      [t2+t1*exp(1J*k),              0]])\n        return H\n    return H\n\ndef Zak(H): # Given the hamiltonian in k space, calculates the zak phase\n    kpath = np.linspace(-pi,pi,100,endpoint=False)\n    Ek,vk = eig(H(kpath[-1]))\n    uN    = vk.T[Ek&lt;0]\n    Ek,vk = eig(H(kpath[0]))\n    u0    = vk.T[Ek&lt;0]\n    Prod  = np.vdot(uN,u0)\n    un1   = u0\n    for k in kpath[1:]:\n        Ek,vk = eig(H(k))\n        un   = vk.T[Ek&lt;0]\n        Prod  = Prod*np.vdot(un1,un)\n        un1   = un\n    ϕ = -imag( log(Prod) )\n    if(ϕ&lt;-10**(-10)): ϕ=ϕ+2*np.pi # We use the log branch [0,2*pi) with 10 digits of resolution\n    return ϕ\n\nt2_path=np.linspace(-2,2,500)\nLzak=[Zak(HamSSH(1,t2)) for t2 in t2_path]\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.plot(t2_path,Lzak,c='green')\nax.set_xlabel('$t_2/t_1$')\nax.set_ylabel('Zak phase')\nax.grid(True)\n\n\n\n\n\n\n\n\n\nWe can observe how the Zak phase is 0 in the trivial regime and is \\(\\pi\\) in the topological regime.\n\n\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the Berry Phase in the Solid State.” Physical Review B 73 (24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in Polyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701. https://doi.org/10.1103/PhysRevLett.42.1698.\n\n\nVanderbilt, David. 2018. Berry Phases in Electronic Structure Theory. First. Cambdridge University Press. https://doi.org/10.1017/9781316662205.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological Phases and the SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#finite-ssh-chain",
    "href": "SSH.html#finite-ssh-chain",
    "title": "2  SSH model",
    "section": "2.2 Finite SSH chain",
    "text": "2.2 Finite SSH chain\nIn order to study this fase transition we now consider a finite SSH chain.\n\nNL=50 # Longitud de cadena\nSSH_Cortado=[]\nfor i in range(Nt):\n  SSH_Cortado.append(SSH_model[i].cut_piece(NL,0,glue_edgs=False))\nSSH_Cortado[1].visualize(0)\n\n\n\n\n\n\n\n\nIn the next cell, we calculate all the eigenstates of the chain. To study the gap closure, we concentrate our attention on the state whose energy is closest to zero.\n\nevals,evecs,ed=[],[],[]\nfor i in range(Nt):\n  Ek,evec = SSH_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(SSH_Cortado[i].get_num_orbitals()//2)\nevals=np.array(evals)\n\nWe now visualize the evolution of the state with energy closest to zero when we vary the ratio \\(t_2/t_1\\). We can observe that for \\(|t_2/t_1|&lt;1\\) the state is localized near the edges of the chain and for \\(|t_2/t_1|\\geq1\\) this state is now unlocalized. In other words, for \\(|t_2/t_1|&lt;1\\) we observe an edge state and for \\(|t_2/t_1|\\geq1\\) it becomes a bulk state.\n\nfor i in range(0,Nt,50):\n  (fig,ax)=SSH_Cortado[i].visualize(0,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"$t_2$=\"+str(T2[i])+\"$t_1$\"+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#ipr",
    "href": "SSH.html#ipr",
    "title": "1  Topological Phases and the SSH model",
    "section": "1.2 IPR",
    "text": "1.2 IPR\nWe now aim to understand the evolution of all the eigenstates of the chain. To achieve this, we use the Inverse Ratio Participation (IPR) which is defined as \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 / \\sum_{n=1}^{N} |\\psi_n|^2 \\label{eq : IPR}\n\\end{equation}\n\\]\nwhere \\(\\psi_n\\) is the amplitude of the wavefunction in the \\(n\\)-th site of the chain, which has \\(N\\) sites. Notice that if we asume \\(\\psi_n\\) is normalized, the term in the denominator is equal to 1.\nThe IPR is a simple way to quantify how many states a particle is distributed over a system. To see this, suppose that the particle is equally distributed over \\(M\\) sites, i.e., \\(|\\psi_n|^2=\\frac{1}{M}\\) for \\(n=1,...,M\\) and zero otherwise. In that case, \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 = \\sum_{n=1}^{M} \\frac{1}{M^2} = \\frac{1}{M}. \\label{eq : IPR-example}\n\\end{equation}\n\\]\nIf we asume that the particle is localized in one state, we see that \\(\\text{IPR}=1\\). In contrast, if we asume that the particle is distributed across every state in the system, then \\(\\text{IPR}=1/N\\), and in the thermodynamic limit, the IPR would tend to zero. A simple exercise of extremation shows that, assuming \\(\\psi_n\\) is normalized, \\[\n\\begin{equation}\n\\frac{1}{N}\\leq \\text{IPR}\\leq 1\n\\end{equation}\n\\]\nwhich makes it a good way to measure the localization of a certain state.\nIn the next cell we calculate the IPR of all the eigenstates of our finite system.\n\n\nCode\nIPR=[]\nfor i in range(Nt):\n  IPR.append([])\n  for edo in evecs[i]:\n    C2=sum(np.absolute(edo)**2)\n    C4=sum(np.absolute(edo)**4)\n    IPR[i].append(C4/C2)\n\n\nWe now graph the evolution of the energy levels as a function of \\(t_2/t_1\\) and color them using the IPR.\n\n\nCode\ndef colorFader(c1,c2,mix=0): \n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Linear interpolation of colors in Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nt):\n    colors.append(Fader(Lc,IPR[j][i]))\n  ax.scatter(T2,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('t2/t1')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(7, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline(x, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe observe two eigenstates with an IPR close to one and energy close to zero when \\(|t_2/t_1|&lt;1\\), indicating localized eigenstates with (almost) zero energy. For the remaining eigenstates, we observe an IPR very close to zero, which implies bulk states that we can associate with the Bloch states of the band structures calculated previously. While strictly speaking, in this system, there is no band structure as we have not imposed periodic boundary conditions, considering a long enough chain allows us to approximate the eigenstates of the bulk with the Bloch eigenfunctions of the band structure. Another relevant observation is the simetry of the energy levels with respect to zero which is a consequence of the sublattice symmetry.\nNotice that in the previous example of the IPR, we made no clear specification of the position of the sites in the system to which the particle was distributed. This means that the IPR cannot tell us if the localized eigenstates are edge states. To address this limitation, we turn to the entanglement entropy.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological Phases and the SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#entanglement-entropy",
    "href": "SSH.html#entanglement-entropy",
    "title": "1  Topological Phases and the SSH model",
    "section": "1.3 Entanglement entropy",
    "text": "1.3 Entanglement entropy\nConsider two systems \\(A\\) and \\(B\\) described by states \\(|\\phi^A\\rangle\\) and \\(|\\phi^B\\rangle\\) with their respective Hilbert space \\(\\mathcal{H}_A\\) and \\(\\mathcal{H}_B\\). Then, the compound system \\(A+B\\) is accurately described by the tensor-product \\(\\mathcal{H}_A\\otimes\\mathcal{H}_B\\) whose basis states are of the form \\(|\\phi^A\\rangle\\otimes|\\phi^B\\rangle\\). A state \\(|\\psi\\rangle\\) of the compound system is called pure if it can be written as \\(|\\psi\\rangle=|\\phi^A\\rangle\\otimes|\\phi^B\\rangle\\) for some \\(\\varphi_{A/B}\\in\\mathcal{H}_{A/B}\\). In any other case we call \\(|\\psi\\rangle\\) an entangled state. For example \\(|\\psi\\rangle=|\\phi^A_1\\rangle\\otimes|\\phi^B_1\\rangle+|\\phi^A_2\\rangle\\otimes|\\phi^B_2\\rangle\\) is in general an entangled state.\nConsider an entangled state \\(|\\psi^{AB}\\rangle\\), we can then expand it as \\[\n\\begin{equation}\n|\\psi^{AB}\\rangle=\\sum_{j=1}^d c_j |\\phi_j^{A}\\rangle\\otimes |\\phi_j^{B}\\rangle. \\label{eq : AB}\n\\end{equation}\n\\]\nThis last expression is called the \\(\\textit{Schmidt decomposition}\\) of \\(|\\psi^{AB}\\rangle\\) where \\(d\\) is, at most, the dimension of the smaller subsystem. If we now wish to study only one of the subsystems, we can no longer describe it using a wave function because \\(|\\psi^{AB}\\rangle\\) is not pure. Instead we turn our attention to the density matrix \\(\\rho_{AB}=|\\psi^{AB}\\rangle\\langle\\psi^{AB}|\\) and calculate its reduced state on A and B by taking the \\(\\textit{parcial trace}\\) over the subsystem as \\[\n\\rho_A=\\text{Tr}_A(\\rho_{AB})\\equiv\\sum_{j=1}^d |c_j|^2 |\\phi_j^{A}\\rangle\\langle\\phi_j^{A}|,\n\\] \\[\n\\rho_B=\\text{Tr}_B(\\rho_{AB})\\equiv\\sum_{j=1}^d |c_j|^2 |\\phi_j^{B}\\rangle\\langle\\phi_j^{B}|.\n\\]\nThe physical reason why both \\(\\rho_A\\) and \\(\\rho_B\\) use the same probability distribution \\(p_j=|c_j|^2\\) stems from the fact that when we measure a particle in an entangled state, we colapse it to a state \\(|\\phi^{A}\\rangle\\otimes |\\phi^{B}\\rangle\\) with a probability \\(|c_j|^2\\). This probability sets the state of A and B at the same time, and since this occurs when we measure any observable associated with subsystem A or B, it means that the probability of measuring such a state is the same when the state is entangled. As a corollary, since both \\(\\rho_A\\) and \\(\\rho_B\\) have the same probabilities, they also have the same Von Neumann entropy. This defines the entanglement entropy as \\[\nS(\\rho_B)=S(\\rho_A)=-\\text{Tr}\\rho_A\\ln\\rho_A=-\\sum_{i} p_i \\ln p_i.\n\\]\nIn their paper Ryu and Hatsugai (2006) proposed that the entanglement entropy could be used to characterize edge states and, as a consequence, topological phases. They also propose a novel way to calculate it, by means of a \\(C\\) Hamiltonian.\nFirst calculate the eigenstates \\(\\psi_\\ell\\) with energy \\(\\epsilon_\\ell&lt;0\\), we then calculate the density matrix of the Fermi sea as, \\[\nP = \\sum_{\\epsilon_\\ell&lt;0} \\psi_\\ell \\psi_\\ell^{\\dagger},\n\\]\nand finaly we calculate the restriction of the P matrix to a subsystem. \\(P\\) is called the correlation matrix. Notice that we have the liberty of defining the subsystems when we “cut” the density matrix: \\[\nP=\\begin{pmatrix}\nC & \\ast \\\\\n\\ast & \\ast\n\\end{pmatrix}\n\\]\nIn the next cell we calculate the eigenvalues of the \\(C\\) Hamiltonian for the SSH chain, in this case we define the subsystems as both halfs of the chain when we cut it right through the middle.\n\n\nCode\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # 2 level system\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=list(sort(np.linalg.eigvals(C)))\n  return ζ\n\nζ=np.array(list(map(C_Spectre,SSH_Cortado)))\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor L in ζ.T:\n  ax.scatter(T2,L,s=1,c='black')\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$t_2/t_1$')\n  ax.set_ylabel('Spectre of $C$')\n  ax.grid(True)\n\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning:\n\nCasting complex values to real discards the imaginary part\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\collections.py:194: ComplexWarning:\n\nCasting complex values to real discards the imaginary part\n\n\n\n\n\n\n\n\n\n\nFrom its definition, \\(P\\) has only two eigenvalues, namely 0 and 1, and the same set of eigen wave functions as the original Hamiltonian. These properties allow us to interpret the correlation matrix as a “Hamiltonian” called the \\(C\\)-Hamiltonian with periodic boundary conditions. We can observe how the \\(C-\\) hamiltonian of the subsystem keeps both of these eigenvalues and as we aproach \\(|t_2/t_1|\\rightarrow\\infty\\) all of the eigenvalues tend to 0 or 1. However, when we cut the system and obtain the matrix \\(C\\), we allow for the formation of new states of this “hamiltonian” in the regime \\(|t_2/t_1|&lt;1\\). So the question arises: how to interpret this new eigenstates?\nIt is possible to solve analytically the system in the dimerized limit (for the SSH chain, this corresponds to \\(t_2=0\\)), and in this regime, Ryu and Hatsugai concluded the existence of two eigenstates with an eigenvalue \\(\\zeta_\\ell\\) very close to \\(1/2\\) associated with the edge states. This is consistent with our previous calculations. Also, we can observe how these edge states tend to the bulk states \\(\\zeta_\\ell=0,1\\) in pairs. That is, for every edge state with \\(\\zeta_\\ell&gt;1/2\\), there exists a partner with an eigenvalue equal to \\(1/2-\\zeta_\\ell\\). This is a general consequence of chiral symmetry, and both of these edge states are chiral partners.\nIf \\({\\zeta_\\ell}\\) are the eigenvalues of \\(C\\), we can calculate the entanglement entropy \\[\nS_A=-\\sum_{\\ell} \\zeta_\\ell \\ln\\zeta_\\ell + (1-\\zeta_\\ell)\\ln(1-\\zeta_\\ell).\n\\]\nIn this example we take advantge of the sublattice symettry of the SSH chain to calculate \\(S_A\\) in an equivalent form as \\[\nS_A=-2\\sum_{\\zeta_\\ell\\geq0.5} (\\zeta_\\ell \\log(\\zeta_\\ell) + (1-\\zeta_\\ell)\\log(1-\\zeta_\\ell)).\n\\]\n\n\nCode\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # Number of states on the Fermi sea\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Here we use chiral simmetry\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # We remove the eigenvalues that dont contribute\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return 2*SEE\n\nSee=list(map(EEntropy,SSH_Cortado))\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.plot(T2,See,c='black')\nax.set_xlabel('$t_2/t_1$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entanglement entropy $S_A$')\nax.grid(True)\n\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1345: ComplexWarning:\n\nCasting complex values to real discards the imaginary part\n\n\n\n\n\n\n\n\n\n\nAccording to Ryu and Hatsugai, the entanglement entropy in the thermodynamic limit is greater than or equal to \\(\\log 2\\) times the number of edges of the system. In this case we can see that \\(S_A\\) goes under this inferior limit \\(2\\ln 2\\) around \\(t_2=\\pm t_1\\), indicating that the two edge states disappear in this limit.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological Phases and the SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#visualización-de-la-solución",
    "href": "SSH.html#visualización-de-la-solución",
    "title": "1  SSH model",
    "section": "1.5 Visualización de la solución",
    "text": "1.5 Visualización de la solución\n\n1.5.1 Caso \\(c_1=1\\) y \\(c_2=0\\)\nConsidermos el caso de \\(c_1=1\\) y \\(c_2=0\\), por lo que \\[\n\\psi\\iprn x \\fprn = e^{ {\\rm i}k x }\n\\]\n\n\n\n\n\n\nGráfica\n\n\n\n\n\n\n\nCode\nfrom pylab import *\n# Masa de un electrón\nm = 9.1093837e-31  # (kg)\n# Constante de planck entre 2π\nħ = 1.05457182e-34 # (J·s)\n# 10 eV\nE = 10*1.602e-19 # (J)\nk = sqrt( 2*m*E/(ħ*ħ) )\n\nprint( \"Caso. Un electrón con energía de 10 eV.\")\nprint( f\"k = {k:.3e} (1/m)\")\nπ  = pi\nx  = linspace( -3*2*π/k,3*2*π/k,1000 )\nψ  = exp( 1J*k*x)\nψ2 = conj(ψ)*ψ\n\n# Graficación\n\nfig,ax = plt.subplots(ncols=1,nrows=2,figsize=(6,4),sharex=True)\nfig.subplots_adjust(hspace=0.1)\n\nax[0].plot(x,ψ.real,label='Re ψ')\nax[0].plot(x,ψ.imag,label='Im ψ')\n\nax[0].legend(loc=0)\n\nax[1].plot(x,ψ2.real,label='|ψ|²')\nax[1].fill_between(x,ψ2.real,zeros_like(x),alpha=0.3)\n\nax[1].legend(loc=0)\n\nax[1].set_xlabel('x (m)');\n\n\nCaso. Un electrón con energía de 10 eV.\nk = 1.620e+10 (1/m)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#viualización-rm-repsi-e-rm-impsi",
    "href": "SSH.html#viualización-rm-repsi-e-rm-impsi",
    "title": "1  SSH model",
    "section": "1.6 Viualización \\({\\rm Re}\\Psi\\) e \\({\\rm Im}\\Psi\\)",
    "text": "1.6 Viualización \\({\\rm Re}\\Psi\\) e \\({\\rm Im}\\Psi\\)\n\n\nCode\nfrom pylab import *\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Masa de un electrón\nm = 9.1093837e-31  # (kg)\n# Constante de planck entre 2π\nħ = 1.05457182e-34 # (J·s)\n# 10 eV\nE = 10*1.602e-19 # (J)\nk = sqrt( 2*m*E/(ħ*ħ) )\nω   = E/ħ\nprint( \"Caso. Un electrón con energía de 10 eV.\")\nprint( f\"k = {k:.3e} (1/m)\")\nprint( f\"ω = {ω:.3e} (1/s)\" )\n# Conversióna femptosegundos\nω /= 1e15\nnpts_x = 2000\nnpts_t = 100\n# x,t = meshgrid( linspace(-3*2*π/k,3*2*π/k,npts_x),linspace(-1*2*π/ω,1*2*π/ω,npts_t) )\nX   = linspace(-3*2*π/k,3*2*π/k,npts_x)\nT   = linspace(0,4*2*π/ω,npts_t)\nΨ   = exp(-1J*ω*T[0])*exp(-1J*k*X)\nReΨ = Ψ.real\nImΨ = Ψ.imag\n\n\ncuadros = []\nfor n in range(1,npts_t):\n    Ψ   = exp(-1J*ω*T[n])*exp(-1J*k*X)\n    cuadros.append( go.Frame(data=[go.Scatter(x=X, y=Ψ.real,mode=\"lines\",name=\"ReΨ\" ),\n                                   go.Scatter(x=X, y=Ψ.imag,mode=\"lines\",line=dict(color='firebrick'),name=\"ImΨ\" )],\n                             layout=go.Layout(title=f\"t={T[n]:.2f} (fs)\")) )\n\nfig = go.Figure(\n    data=[go.Scatter(x=X, y=ReΨ,mode=\"lines\",name=\"ReΨ\" ),go.Scatter(x=X, y=Ψ.imag,mode=\"lines\",line=dict(color='firebrick'),name=\"ImΨ\" )],\n    layout=go.Layout(\n        title=\"t=0.00 (fs)\",\n        xaxis_title=\"x (nm)\",\n        yaxis_title=\"Re[Ψ]\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=1.1,\n                          buttons=[dict(label=\"Reproducir\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=100,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n                          \n    ),\n    frames = cuadros\n)\n\nfig.show()\n\n\nCaso. Un electrón con energía de 10 eV.\nk = 1.620e+10 (1/m)\nω = 1.519e+16 (1/s)\n\n\n                                                \n\n\n:::\n\n\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the Berry Phase in the Solid State.” Physical Review B 73 (24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in Polyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701. https://doi.org/10.1103/PhysRevLett.42.1698.\n\n\nVanderbilt, David. 2018. Berry Phases in Electronic Structure Theory. First. Cambdridge University Press. https://doi.org/10.1017/9781316662205.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#visualization-of-edge-states",
    "href": "Kitaev_Chain.html#visualization-of-edge-states",
    "title": "2  Kitaev chain",
    "section": "2.3 Visualization of edge states",
    "text": "2.3 Visualization of edge states\n\n\nCode\nNL=10\nKC_cut=[KitaevChain[i].cut_piece(NL,0,glue_edgs=False) for i in range(Nμ)]\nKC_cut[1].visualize(0,1)\n\n\n\n\n\n\n\n\n\n\n\nCode\nevals,evecs,ed=[],[],[]\nfor i in range(Nμ):\n  Ek,evec=KC_cut[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(KC_cut[i].get_num_orbitals()//2) \nevals=np.array(evals)\n\n\n\n\nCode\nimport plotly.graph_objects as go\ncuadros = []\nfor i in range(Nμ):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(range(NL)), y=abs(evecs[i][ed[i],:][::2])**2,mode=\"lines\"),\n    go.Scatter(x=list(range(NL)), y=abs(evecs[i][ed[i],:][1::2])**2,mode=\"lines\")],\n                             layout=go.Layout(title=f\"μ/t={M[i]:.2f}\" ) ))\n\nfig = go.Figure(\n     data=[go.Scatter(x=list(range(NL)), y=abs(evecs[0][ed[0],:][::2])**2, name=\"Electron distribution\", mode=\"lines\"),\n    go.Scatter(x=list(range(NL)), y=abs(evecs[0][ed[0],:][1::2])**2,name=\"Hole distribution\",  mode=\"lines\")],\n    layout=go.Layout(\n        title=f\"μ/t={M[0]:.2f}\",\n        xaxis_title=\"n\",\n        yaxis_title=r\"|ψn|^2\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.9,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\n\nfig.update_xaxes(range=[0,NL])\nfig.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#energy-levels-v.s.-mut",
    "href": "Kitaev_Chain.html#energy-levels-v.s.-mut",
    "title": "2  Kitaev chain",
    "section": "2.4 Energy levels v.s. \\(\\mu/t\\)",
    "text": "2.4 Energy levels v.s. \\(\\mu/t\\)\n\n\nCode\ndef ipr(edo):\n  abs=np.absolute(edo)**2\n  C2=sum(abs**2)\n  C4=sum(abs**4)\n  return C4/C2\n \ndef colorFader(c1,c2,mix=0): # linear interpolation of color c1 (mix=0) to color c2 (mix=1)\n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix):  \n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nIPR=[list(map(ipr,evecs[i])) for i in range(Nμ)]\n\nLc=['Cyan','Blue','Red']\nfig, ax = plt.subplots(figsize=(7, 6))\nMax=np.max(np.max(IPR))\nMin=np.min(np.min(IPR))\nfor i in range(2*NL): \n  colors = []\n  for j in range(Nμ):\n    colors.append(Fader(Lc,(IPR[j][i]-Min)/(Max-Min)))\n  ax.scatter(M,evals.T[i],c=colors,s=0.5)\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(7, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline((Max-Min)*x+Min, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.set_xlim(Min,Max)\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#c-hamiltonian",
    "href": "Kitaev_Chain.html#c-hamiltonian",
    "title": "2  Kitaev chain",
    "section": "2.5 \\(C\\)-Hamiltonian",
    "text": "2.5 \\(C\\)-Hamiltonian\n\n\nCode\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # 2 level system\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=list(sort(np.linalg.eigvals(C)))\n  return ζ\n\nζ=np.array(list(map(C_Spectre,KC_cut)))\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor L in ζ.T:\n  ax.scatter(M,L,c='black',s=1)\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('$C$ Spectre')\n  ax.grid(True)\n\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning:\n\nCasting complex values to real discards the imaginary part\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\collections.py:194: ComplexWarning:\n\nCasting complex values to real discards the imaginary part",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#entanglement-entropy",
    "href": "Kitaev_Chain.html#entanglement-entropy",
    "title": "2  Kitaev chain",
    "section": "2.6 Entanglement entropy",
    "text": "2.6 Entanglement entropy\n\n\nCode\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # Number of states on the Fermi sea\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Here we use chiral symmetry\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # We remove the eigenvalues that don't contribute\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return 2*SEE\n \nSee=list(map(EEntropy,KC_cut))\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.scatter(M,See,s=1,c='black')\nax.set_xlabel('$\\mu/t$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entropy of Entanglement $S_A$')\nax.set_ylim(0.5,1.8)\nax.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#zak-phase",
    "href": "Kitaev_Chain.html#zak-phase",
    "title": "2  Kitaev chain",
    "section": "2.7 Zak Phase",
    "text": "2.7 Zak Phase\n\n\nCode\ndef Ham_Kitaev_Chain(mu,t,delta):\n    def H(k):\n        H = np.array([[           -2*t*np.cos(k)-mu, -2j*delta*sin(k)],\n                      [ 2j*delta*sin(k),              2*t*np.cos(k)+mu]])\n        return H\n    return H\n\ndef Zak(H):  \n    kpath = np.linspace(-pi,pi,100,endpoint=False)\n    Ek,vk = eig(H(kpath[-1]))\n    uN    = vk.T[Ek&lt;0]\n    Ek,vk = eig(H(kpath[0]))\n    u0    = vk.T[Ek&lt;0]\n    Prod  = np.vdot(uN,u0)\n    un1   = u0\n    for k in kpath[1:]:\n        Ek,vk = eig(H(k))\n        un   = vk.T[Ek&lt;0]\n        Prod  = Prod*np.vdot(un1,un)\n        un1   = un\n    ϕ = -imag( log(Prod) )\n    if(ϕ&lt;-10**(-10)): ϕ=ϕ+2*np.pi  \n    return ϕ\n\n\nmu_path=np.linspace(-3,3,300)\nLzak=[Zak(Ham_Kitaev_Chain(mu,1,0.1)) for mu in mu_path]\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.plot(mu_path,Lzak,c='green')\nax.set_xlabel('$t_2/t_1$')\nax.set_ylabel('Zak phase')\nax.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#band-structure",
    "href": "Kitaev_Chain.html#band-structure",
    "title": "2  Kitaev chain",
    "section": "2.2 Band structure",
    "text": "2.2 Band structure\n\n\nCode\n%%capture\nXm = [-0.5]\nXp = [ 0.5]\npuntosK = [Xm,[0],Xp]\nEk=[]\nfor i in range(Nμ):\n  kpts, kdist, knode = KitaevChain[i].k_path(puntosK,101,report=True)\n  Ek.append(KitaevChain[i].solve_all(kpts,eig_vectors=False))\n\n\n\n\nCode\nimport plotly.graph_objects as go\ncuadros = []\nfor i in range(Nμ):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(kdist), y=Ek[i][0],mode=\"lines\"),\n                                   go.Scatter(x=list(kdist), y=Ek[i][1],line=dict(color='firebrick'),mode=\"lines\")],\n                             layout=go.Layout(title=f\"μ/t={M[i]:.2f}\" ) ))\n\nfig = go.Figure(\n    data=[go.Scatter(x=kdist, y=Ek[0][0],  mode=\"lines\",name=\"Valence band\"),\n          go.Scatter(x=kdist, y=Ek[0][1],mode=\"lines\",line=dict(color='firebrick'),name=\"Conductance band\")],\n    layout=go.Layout(\n        title=f\"μ/t={M[0]:.2f}\",\n        xaxis_title=\"Reduced k-vector\",\n        yaxis_title=\"E(k)\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.8,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\n\nfig.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kitaev chain</span>"
    ]
  },
  {
    "objectID": "1D_Systems.html",
    "href": "1D_Systems.html",
    "title": "1  Topological 1D systems",
    "section": "",
    "text": "1.1 Band structures and gap closings\nNow we calculate the band structure of the SSH model and the Kitaev chain for different values of \\(v/w\\) and \\(μ/t\\) over the first Brillouin zone.\nFor the SSH model, it is evident that the band gap closes when \\(v/w=\\pm 1\\), indicating a phase transition dependent on the ratio \\(v/w\\).\nThe Kitaev chain model exhibits a similar behavior. In order to study this system more fully we calculate the band gap for various values of \\(t\\) and \\(\\Delta\\). We can observe how a band gap closing occurs for \\(\\mu/t=2\\) for any value of \\(\\Delta\\).\nIn both cases we observe two distinct phases distinguised by the closing of ther band gaps.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological 1D systems</span>"
    ]
  },
  {
    "objectID": "1D_Systems.html#ipr",
    "href": "1D_Systems.html#ipr",
    "title": "1  Topological 1D systems",
    "section": "1.3 IPR",
    "text": "1.3 IPR\nWe now aim to understand the evolution of all the eigenstates of the chain. To achieve this, we use the Inverse Ratio Participation (IPR) which is defined as \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 / \\sum_{n=1}^{N} |\\psi_n|^2 \\label{eq : IPR}\n\\end{equation}\n\\]\nwhere \\(\\psi_n\\) is the amplitude of the wavefunction in the \\(n\\)-th site of the chain, which has \\(N\\) sites. Notice that if we asume \\(\\psi_n\\) is normalized, the term in the denominator is equal to 1.\nThe IPR is a simple way to quantify how many states a particle is distributed over a system. To see this, suppose that the particle is equally distributed over \\(M\\) sites, i.e., \\(|\\psi_n|^2=\\frac{1}{M}\\) for \\(n=1,...,M\\) and zero otherwise. In that case, \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 = \\sum_{n=1}^{M} \\frac{1}{M^2} = \\frac{1}{M}. \\label{eq : IPR-example}\n\\end{equation}\n\\]\nIf we asume that the particle is localized in one state, we see that \\(\\text{IPR}=1\\). In contrast, if we asume that the particle is distributed across every state in the system, then \\(\\text{IPR}=1/N\\), and in the thermodynamic limit, the IPR would tend to zero. A simple exercise of extremation shows that, assuming \\(\\psi_n\\) is normalized, \\[\n\\begin{equation}\n\\frac{1}{N}\\leq \\text{IPR}\\leq 1\n\\end{equation}\n\\]\nwhich makes it a good way to measure the localization of a certain state.\nIn the next cell we calculate the IPR of all the eigenstates of our finite systems and graph the evolution of the energy levels as a function of \\(v/w\\) and \\(\\mu/t\\) and color them using the IPR.\n\n\n\n\n\n\nIPR SSH model\n\n\n\n\n\n\n\nCode\nIPR=sum(abs(evecs_SSH)**4,2)\n\nfig, ax = plt.subplots(figsize=(7, 6))\n\nfor i in range(2*NL):\n  mapp=ax.scatter(V,evals_SSH.T[i],c=IPR.T[i],s=0.5,vmax=IPR.max(),vmin=IPR.min(), cmap=\"jet_r\")\ncbar = colorbar(mapp)\nax.set_xlabel('v/w')\nax.set_ylabel('E')\ncbar.ax.set_ylabel('IPR', rotation=270)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIPR Kitaev chain\n\n\n\n\n\n\n\nCode\nIPR=sum(abs(evecs_KC)**4,2)\n\nfig, ax = plt.subplots(figsize=(7, 6))\n\nfor i in range(2*NL):\n  mapp=ax.scatter(M,evals_KC.T[i],c=IPR.T[i],s=0.5,vmax=IPR.max(),vmin=IPR.min(), cmap=\"jet_r\")\ncbar = colorbar(mapp)\ncbar.ax.set_ylabel('IPR', rotation=270)\nax.set_xlabel('μ/t')\nax.set_ylabel('E')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nIn both systems we observe two eigenstates with an IPR close to one and energy close to zero when \\(|v/w|&lt;1\\) (\\(|\\mu/t|&lt;2\\)), indicating localized eigenstates with (almost) zero energy. For the remaining eigenstates, we observe an IPR very close to zero, which implies bulk states that we can associate with the Bloch states of the band structures calculated previously. While strictly speaking, in this system, there is no band structure as we have not imposed periodic boundary conditions, considering a long enough chain allows us to approximate the eigenstates of the bulk with the Bloch eigenfunctions of the band structure.\nA very relevant observation to be made here is the simetry of the energy levels with respect to zero in both systems. This is a consequence of chiral symmetry which in the SSH model corresponds to the sublattice symmetry and in the Kitaev chain model corresponds to particle-hole symmetry and time reversal simmetry.\nNotice that in the previous example of the IPR, we made no clear specification of the position of the sites in the system to which the particle was distributed. This means that the IPR cannot tell us if the localized eigenstates are edge states. To address this limitation, we turn to the entanglement entropy.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological 1D systems</span>"
    ]
  },
  {
    "objectID": "1D_Systems.html#entanglement-entropy",
    "href": "1D_Systems.html#entanglement-entropy",
    "title": "1  Topological 1D systems",
    "section": "1.4 Entanglement entropy",
    "text": "1.4 Entanglement entropy\nConsider two systems \\(A\\) and \\(B\\) described by states \\(|\\phi^A\\rangle\\) and \\(|\\phi^B\\rangle\\) with their respective Hilbert space \\(\\mathcal{H}_A\\) and \\(\\mathcal{H}_B\\). Then, the compound system \\(A+B\\) is accurately described by the tensor-product \\(\\mathcal{H}_A\\otimes\\mathcal{H}_B\\) whose basis states are of the form \\(|\\phi^A\\rangle\\otimes|\\phi^B\\rangle\\). A state \\(|\\psi\\rangle\\) of the compound system is called pure if it can be written as \\(|\\psi\\rangle=|\\phi^A\\rangle\\otimes|\\phi^B\\rangle\\) for some \\(\\varphi_{A/B}\\in\\mathcal{H}_{A/B}\\). In any other case we call \\(|\\psi\\rangle\\) an entangled state. For example \\(|\\psi\\rangle=|\\phi^A_1\\rangle\\otimes|\\phi^B_1\\rangle+|\\phi^A_2\\rangle\\otimes|\\phi^B_2\\rangle\\) is in general an entangled state.\nConsider an entangled state \\(|\\psi^{AB}\\rangle\\), we can then expand it as \\[\n\\begin{equation}\n|\\psi^{AB}\\rangle=\\sum_{j=1}^d c_j |\\phi_j^{A}\\rangle\\otimes |\\phi_j^{B}\\rangle. \\label{eq : AB}\n\\end{equation}\n\\]\nThis last expression is called the \\(\\textit{Schmidt decomposition}\\) of \\(|\\psi^{AB}\\rangle\\) where \\(d\\) is, at most, the dimension of the smaller subsystem. If we now wish to study only one of the subsystems, we can no longer describe it using a wave function because \\(|\\psi^{AB}\\rangle\\) is not pure. Instead we turn our attention to the density matrix \\(\\rho_{AB}=|\\psi^{AB}\\rangle\\langle\\psi^{AB}|\\) and calculate its reduced state on A and B by taking the \\(\\textit{parcial trace}\\) over the subsystem as \\[\n\\rho_A=\\text{Tr}_A(\\rho_{AB})\\equiv\\sum_{j=1}^d |c_j|^2 |\\phi_j^{A}\\rangle\\langle\\phi_j^{A}|,\n\\] \\[\n\\rho_B=\\text{Tr}_B(\\rho_{AB})\\equiv\\sum_{j=1}^d |c_j|^2 |\\phi_j^{B}\\rangle\\langle\\phi_j^{B}|.\n\\]\nThe physical reason why both \\(\\rho_A\\) and \\(\\rho_B\\) use the same probability distribution \\(p_j=|c_j|^2\\) stems from the fact that when we measure a particle in an entangled state, we colapse it to a state \\(|\\phi^{A}\\rangle\\otimes |\\phi^{B}\\rangle\\) with a probability \\(|c_j|^2\\). This probability sets the state of A and B at the same time, and since this occurs when we measure any observable associated with subsystem A or B, it means that the probability of measuring such a state is the same when the state is entangled. As a corollary, since both \\(\\rho_A\\) and \\(\\rho_B\\) have the same probabilities, they also have the same Von Neumann entropy. This defines the entanglement entropy as \\[\nS(\\rho_B)=S(\\rho_A)=-\\text{Tr}\\rho_A\\ln\\rho_A=-\\sum_{i} p_i \\ln p_i.\n\\]\nIn their paper Ryu and Hatsugai (2006) proposed that the entanglement entropy could be used to characterize edge states and, as a consequence, topological phases. They also propose a novel way to calculate it, by means of a \\(C\\) Hamiltonian.\nFirst calculate the eigenstates \\(\\psi_\\ell\\) with energy \\(\\epsilon_\\ell&lt;0\\), we then calculate the density matrix of the Fermi sea as, \\[\nP = \\sum_{\\epsilon_\\ell&lt;0} \\psi_\\ell \\psi_\\ell^{\\dagger},\n\\]\nand finaly we calculate the restriction of the P matrix to a subsystem. \\(P\\) is called the correlation matrix. Notice that we have the liberty of defining the subsystems when we “cut” the density matrix: \\[\nP=\\begin{pmatrix}\nC & \\ast \\\\\n\\ast & \\ast\n\\end{pmatrix}\n\\]\nIn the next cells we calculate the eigenvalues of the \\(C\\) Hamiltonian for the SSH and the Kitaev chain, in this case we define the subsystems as both halfs of the chain when we cut it right through the middle.\n\n\nCode\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # 2 level system\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=list(sort(np.linalg.eigvals(C)))\n  return ζ\n\n\n\n\n\n\n\n\nC-Hamiltonian spectre for SSH chain\n\n\n\n\n\n\n\nCode\nV = linspace(-2,2,301)\nζ = [ C_Spectre(SSH_chain(NL=50,v=v)) for v in V]\nζ = real(np.array(ζ))\n\nfig, ax = plt.subplots(figsize=(6, 5))\nfor L in ζ.T:\n  ax.scatter(V,L,s=1,c='black')\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$v/w$')\n  ax.set_ylabel('Spectre of $C$')\n  ax.grid(True)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC-Hamiltonian spectre for Kitaev chain\n\n\n\n\n\n\n\nCode\nΔ=0.5\nM = linspace(-4,4,301)\nζ = [ C_Spectre(Kitaev_chain(NL=50,Δ=Δ,μ=μ)) for μ in M]\nζ = real(np.array(ζ))\n\nfig, ax = plt.subplots(figsize=(6, 5))\nfor L in ζ.T:\n  ax.scatter(M,L,s=1,c='black')\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$μ/t$')\n  ax.set_ylabel('Spectre of $C$')\n  ax.grid(True)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nFrom its definition, \\(P\\) has only two eigenvalues, namely 0 and 1, and the same set of eigen wave functions as the original Hamiltonian. These properties allow us to interpret the correlation matrix as a “Hamiltonian” called the \\(C\\)-Hamiltonian with periodic boundary conditions. We can observe how the \\(C-\\) hamiltonian of the subsystem keeps both of these eigenvalues and as we aproach \\(|v/w|\\rightarrow\\infty\\) all of the eigenvalues tend to 0 or 1. However, when we cut the system and obtain the matrix \\(C\\), we allow for the formation of new states of this “hamiltonian” in the regime \\(|v/w|&lt;1\\) and \\(|\\mu/t|&lt;2\\). So the question arises: how to interpret this new eigenstates?\nIt is possible to solve analytically the system in the dimerized limit (for the SSH chain this corresponds to \\(v=0\\)), and in this regime, Ryu and Hatsugai concluded that there existed two edge states with an eigenvalue \\(\\zeta_\\ell\\) close to \\(1/2\\). This is consistent with our previous calculations. Also, we can observe how these edge states tend to the bulk states \\(\\zeta_\\ell=0,1\\) in pairs. That is, for every edge state with \\(\\zeta_\\ell&gt;1/2\\), there exists a partner with an eigenvalue equal to \\(1/2-\\zeta_\\ell\\). This is a general consequence of chiral symmetry, with these edge states being chiral partners.\nIf \\({\\zeta_\\ell}\\) are the eigenvalues of \\(C\\), we can calculate the entanglement entropy \\[\nS_A=-\\sum_{\\ell} \\zeta_\\ell \\ln\\zeta_\\ell + (1-\\zeta_\\ell)\\ln(1-\\zeta_\\ell).\n\\]\nIn this example we take advantge of the chiral symetry of both systems to calculate \\(S_A\\) in an equivalent form as \\[\nS_A=-2\\sum_{\\zeta_\\ell\\geq0.5} (\\zeta_\\ell \\log(\\zeta_\\ell) + (1-\\zeta_\\ell)\\log(1-\\zeta_\\ell)).\n\\]\n\n\nCode\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # Number of states on the Fermi sea\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Here we use chiral simmetry\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # We remove the eigenvalues that dont contribute\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return 2*SEE\n\n\n\n\n\n\n\n\nEntanglement entropy for SSH chain\n\n\n\n\n\n\n\nCode\nV = linspace(-2,2,301)\nSee = [ EEntropy(SSH_chain(NL=50,v=v)) for v in V]\nSee = real(See)\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.scatter(V,See,c='black',s=1)\nax.set_xlabel('$v/w$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylim(0.2,1.7)\nax.set_ylabel('Entanglement entropy $S_A$')\nax.grid(True)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEntanglement entropy for Kitaev chain\n\n\n\n\n\n\n\nCode\nΔ=0.5\nM = linspace(-4,4,301)\nSee = [ EEntropy(Kitaev_chain(NL=50,Δ=Δ,μ=μ)) for μ in M]\nSee = real(See)\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.scatter(M,See,c='black',s=1)\nax.set_xlabel('$μ/t$')\nax.set_ylim(0.8,1.5)\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entanglement entropy $S_A$')\nax.grid(True)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nAccording to Ryu and Hatsugai, the entanglement entropy in the thermodynamic limit is greater than or equal to \\(\\log 2\\) times the number of edges of the system. In this case we can see that \\(S_A\\) goes under this inferior limit \\(2\\ln 2\\) around \\(v=\\pm w\\) for the SSH model and in \\(\\mu=\\pm 2t\\) for the Kitaev chain, indicating that both edge states disappear in this limit.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological 1D systems</span>"
    ]
  },
  {
    "objectID": "1D_Systems.html#zaks-phase",
    "href": "1D_Systems.html#zaks-phase",
    "title": "1  Topological 1D systems",
    "section": "1.5 Zak’s phase",
    "text": "1.5 Zak’s phase\nIn order to say that this is a topological phase transition we must asociate each phase with a \\(\\textit{topological invariant}\\). A prime example of a topological invariant is the \\(\\textit{Berry phase}\\) also called the \\(\\textit{geometric phase}\\) which is a quantity that describes how a global phase accumulates as some state \\(|\\psi\\rangle\\) is carried around a closed loop in a complex space. For example, if we consider a loop of states \\(\\{|\\psi_0\\rangle, |\\psi_1\\rangle , \\dots , |\\psi_N\\rangle\\}\\) where we set \\(|\\psi_0\\rangle=|\\psi_N\\rangle\\). The Berry phase for this discrete loop is defined as \\[\n\\phi=-\\arg( \\langle\\psi_0|\\psi_1\\rangle \\langle\\psi_1|\\psi_2\\rangle \\cdots \\langle\\psi_{N-1}|\\psi_0\\rangle ).\n\\]\nIt can be easily seen that \\(\\phi\\) is a gauge invariant to the transformation \\(|\\psi_n\\rangle\\rightarrow e^{i \\alpha_n} |\\psi_n\\rangle\\) because the ket \\(|\\psi_n\\rangle\\) will cancel the phase \\(e^{i \\alpha_n}\\) carried by the bra \\(\\langle \\psi_n |\\).\nThe Berry phase has a generalization for a continuous loop of states \\(\\{ |\\psi_\\lambda\\rangle ; \\:\\:\\lambda\\in[0,1] \\}\\) : \\[\n\\phi=\\oint \\langle u_\\lambda| i\\partial_\\lambda u_\\lambda\\rangle \\text{d}\\lambda\n\\]\nA proof of this expression can be found in Vanderbilt (2018).\nHere we will calculate Zak’s phase, which is defined as the Berry phase where \\(\\mathcal{C}\\) is the Brillouin Zone, which means \\[\n\\gamma=\\int_{-\\pi}^{\\pi} \\langle u_k^n| i \\partial_k |u_k^n\\rangle \\text{d} k,\n\\]\nwhere \\(u_k^n\\) is the amplitude of the Bloch wavefunction with crystaline momentum \\(k\\) associated with the \\(n\\)-th band.\nIn the next cells we calculate the Zak phase for the valence band on the SSH model and the Kitaev chain.\n\n\nCode\ndef Zak(H): # Given the hamiltonian in k space, calculates the Zak phase\n    kpath = np.linspace(-pi,pi,101,endpoint=False)\n    Ek,vk = eig(H(kpath[-1]))\n    uN    = vk.T[Ek&lt;0]\n    Ek,vk = eig(H(kpath[0]))\n    u0    = vk.T[Ek&lt;0]\n    Prod  = np.vdot(uN,u0)\n    un1   = u0\n    for k in kpath[1:]:\n        Ek,vk = eig(H(k))\n        un   = vk.T[Ek&lt;0]\n        Prod  = Prod*np.vdot(un1,un)\n        un1   = un\n    if(Prod!=0):\n      ϕ = -imag( log(Prod) )\n      if(ϕ&lt;-10**(-10)): ϕ=ϕ+2*np.pi # We use the log branch [0,2*pi) with 10 digits of resolution\n    else:\n      ϕ=0\n    return ϕ\n\n\n\n\n\n\n\n\nZak’s phase for SSH model\n\n\n\n\n\n\n\nCode\ndef HamSSH(v,w=1): # We define the SSH hamiltonian in k space\n    def H(k):\n        H = np.array([[            0, v+w*exp(-1J*k)],\n                      [v+w*exp(1J*k),              0]])\n        return H\n    return H\n\nV=np.linspace(-2,2,500)\nLzak=[Zak(HamSSH(v)) for v in V]\n\nfig, ax = plt.subplots(figsize=(6, 5))\nax.plot(V,Lzak,c='green')\nax.set_xlabel('$v/w$')\nax.set_ylabel('Zak phase')\nax.grid(True)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZak’s phase for Kitaev chain model\n\n\n\n\n\n\n\nCode\ndef Ham_Kitaev_Chain(μ,Δ,t=1):\n    def H(k):\n        H = np.array([[           -2*t*np.cos(k)-μ, -2j*Δ*sin(k)],\n                      [ 2j*Δ*sin(k),              2*t*np.cos(k)+μ]])\n        return H\n    return H\n\nM, D = linspace(-4,4,100), linspace(0,1,100)\nZak_Phase = [[ Zak(Ham_Kitaev_Chain(μ=μ,Δ=Δ)) for μ in M ] for Δ in D]\n\nfig,ax=plt.subplots(figsize=(6,4))\nX, Y = np.meshgrid(M, D)\ncp = ax.contourf(X, Y, Zak_Phase,cmap='viridis',levels=np.linspace(0,pi,300))\ncbar = colorbar(cp,ticks=linspace(0,pi,9))\nax.set_xlabel('$μ/t$')\nax.set_ylabel('$Δ/t$')\ncbar.ax.set_ylabel('Zak phase', rotation=270, labelpad = 11)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nWe can observe how the Zak phase is 0 in the trivial regime and is \\(\\pi\\) in the topological regime for both systems. We can apreciate how the Zak phase characterices in a simple and general way both topological phases with precision.\n\n\n\n\nAnnett, J F. 2004. Superconductivity, superfluids and condensates. Oxford Master Series in Condensed Matter Physics. Oxford: Oxford Univ. Press. https://cds.cern.ch/record/730995.\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the Berry Phase in the Solid State.” Physical Review B 73 (24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSato, Masatoshi, and Yoichi Ando. 2017. “Topological Superconductors: A Review.” Reports on Progress in Physics 80 (7): 076501.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in Polyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701. https://doi.org/10.1103/PhysRevLett.42.1698.\n\n\nVanderbilt, David. 2018. Berry Phases in Electronic Structure Theory. First. Cambdridge University Press. https://doi.org/10.1017/9781316662205.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological 1D systems</span>"
    ]
  },
  {
    "objectID": "1D_Systems.html#band-structures-and-gap-closings",
    "href": "1D_Systems.html#band-structures-and-gap-closings",
    "title": "1  Topological 1D systems",
    "section": "",
    "text": "SSH band evolution visualization\n\n\n\n\n\n\n\nCode\nk = linspace(0,1,101)\nV = linspace(-2,2,101)\nEk = [ SSH_model(v).solve_all(k) for v in V ]\nGap = [ min(bands[1])-max(bands[0]) for bands in Ek ]\n\nimport plotly.graph_objects as go\ncuadros = []\nfor i in range(len(V)):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(k), y=Ek[i][0],mode=\"lines\"),\n                                   go.Scatter(x=list(k), y=Ek[i][1],line=dict(color='firebrick'),mode=\"lines\")],\n                             layout=go.Layout(title=f\"v/w={V[i]:.2f}, Band gap={Gap[i]:.2f}\" ) ))\n\nfig = go.Figure(\n    data=[go.Scatter(x=list(k), y=Ek[0][0],  mode=\"lines\",name=\"Valence band\"),\n          go.Scatter(x=list(k), y=Ek[0][1],mode=\"lines\",line=dict(color='firebrick'),name=\"Conductance band\")],\n    layout=go.Layout(\n        title=f\"v/w={V[0]:.2f}, Band gap={Gap[0]:.2f}\",\n        xaxis_title=\"k\",\n        yaxis_title=\"E(k)\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.8,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\nfig.update_layout(\n    autosize=False,\n    width=600,\n    height=400,\n)\nfig.show()\n\n\n                                                \n\n\n\n\n\n\n\n\n\n\n\nKitaev chain band evolution\n\n\n\n\n\n\n\nCode\nk = linspace(0,1,101)\nM = linspace(-3,3,101)\nΔ = 0.5\nEk = [ Kitaev_1D(μ=μ,Δ=Δ).solve_all(k) for μ in M ]\nGap = [ min(bands[1])-max(bands[0]) for bands in Ek ]\n\nimport plotly.graph_objects as go\ncuadros = []\nfor i in range(len(M)):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(k), y=Ek[i][0],mode=\"lines\"),\n                                   go.Scatter(x=list(k), y=Ek[i][1],line=dict(color='firebrick'),mode=\"lines\")],\n                             layout=go.Layout(title=f\"μ/t={M[i]:.2f}, Δ={Δ:.2f}, Band gap={Gap[i]:.2f}\" ) ))\n\nfig = go.Figure(\n    data=[go.Scatter(x=k, y=Ek[0][0],  mode=\"lines\",name=\"Valence band\"),\n          go.Scatter(x=k, y=Ek[0][1],mode=\"lines\",line=dict(color='firebrick'),name=\"Conductance band\")],\n    layout=go.Layout(\n        title=f\"μ/t={M[0]:.2f}, Δ={Δ:.2f}, Band gap={Gap[0]:.2f}\",\n        xaxis_title=\"k\",\n        yaxis_title=\"E(k)\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.8,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\nfig.update_layout(\n    autosize=False,\n    width=600,\n    height=400,\n)\nfig.show()\n\n\n                                                \n\n\n\n\n\n\n\n\n\n\n\n\nBand gap in the SSH model\n\n\n\n\n\n\n\nCode\nfig, ax = plt.subplots(figsize=(5, 3))\n\nk = linspace(0,1,101)\nV = linspace(-2,2,101)\nEk = [ SSH_model(v).solve_all(k) for v in V ]\nGap = [ min(bands[1])-max(bands[0]) for bands in Ek ]\n\nax.plot(V,Gap,c='black')\nax.set_xlabel('v/w')\nax.grid(True)\nax.set_label('SSH model band gap')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBand gap of the Kitaev chain\n\n\n\n\n\n\n\nCode\nM,D,k = linspace(-4,4,101),linspace(0,1,101),linspace(0,0.5,50)\nGap = [[ min(Kitaev_1D(μ=μ,Δ=Δ).solve_all(k)[1]) - max(Kitaev_1D(μ=μ,Δ=Δ).solve_all(k)[0]) for μ in M ] for Δ in D]\n\nfig,ax=plt.subplots(figsize=(6,4))\nX, Y = np.meshgrid(M, D)\ncp = ax.contourf(X, Y, Gap,levels=np.linspace(0,4,300),cmap='viridis')\ncbar = colorbar(cp,ticks=linspace(0,4,9))\nax.set_xlabel('$μ/t$')\nax.set_ylabel('$Δ/t$')\ncbar.ax.set_ylabel('Band gap', rotation=270, labelpad = 11)\n\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological 1D systems</span>"
    ]
  },
  {
    "objectID": "1D_Systems.html#edge-states",
    "href": "1D_Systems.html#edge-states",
    "title": "1  Topological 1D systems",
    "section": "1.2 Edge states",
    "text": "1.2 Edge states\nWe have studied the bulk of both of these 1D systems and found two distinct phases. In order to get a more complete understanding of these structures we must now study the edge.\nFor this matter we now consider finite chunks of both the SSH model and the Kitaev chain model which we define in the following cells.\n\n\n\n\n\n\nSSH finite chain\n\n\n\n\n\n\n\nCode\ndef SSH_chain(NL,v=1,w=1):\n  lat=[[2,0],[0,2]]\n  sites=[[0,0],[0.5,0.5]]\n  SSH=tb_model(1,2,lat,sites,per=[0])\n  SSH.set_hop(w,1,0,[1,0])\n  SSH.set_hop(v,0,1,[0,0])\n  SSH.set_onsite([0,0])\n  return SSH.cut_piece(NL,0)\n\n(fig,ax)=SSH_chain(NL=10,v=0.5).visualize(0,1)\n#ax.set_ylim(-1,2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKitaev finite chain\n\n\n\n\n\n\n\nCode\ndef Kitaev_chain(NL,μ=0,t=1,Δ=1):\n  lat=[[1.0,0.0],[0.0,1.0]]\n  orb=[[0.0,-1.0],[0.,1.0]]\n  KC=tb_model(1,2,lat,orb,per=[0])\n  KC.set_hop(t,0,0,[1,0]) \n  KC.set_hop(-t,1,1,[1,0])\n  KC.set_hop(Δ,0,1,[1,0])\n  KC.set_hop(-Δ,0,1,[-1,0])\n  KC.set_onsite([μ,-μ])\n  return KC.cut_piece(NL,0)\n\nKitaev_chain(NL=10,Δ=0.5).visualize(0,1)\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next cell, we calculate the eigenstates of both finite systems with a length of 50 sites.\n\n\nCode\nevals_SSH,evecs_SSH,ed_SSH=[],[],[]\nV = linspace(-2,2,301)\nfor v in V:\n  model = SSH_chain(v=v,NL=50)\n  Ek,evec = model.solve_all(eig_vectors=True)\n  evals_SSH.append(Ek)\n  evecs_SSH.append(evec)\n  ed_SSH.append(model.get_num_orbitals()//2)\nevals_SSH=np.array(evals_SSH)\nevecs_SSH=np.array(evecs_SSH)\n\nevals_KC,evecs_KC,ed_KC=[],[],[]\nΔ = 0.5\nM = linspace(-4,4,301)\nfor μ in M:\n  model = Kitaev_chain(μ=μ,Δ=Δ,NL=50)\n  Ek,evec = model.solve_all(eig_vectors=True)\n  evals_KC.append(Ek)\n  evecs_KC.append(evec)\n  ed_KC.append(model.get_num_orbitals()//2)\nevals_KC=np.array(evals_KC)\nevecs_KC=np.array(evecs_KC)\n\n\nTo study the gap closure, we focus our attention on those states whose energy is positive and closest to zero when we vary \\(v/w\\) (\\(\\mu/t\\)) for the SSH chain (Kitaev chain).\n\n\n\n\n\n\nEdge state SSH model\n\n\n\n\n\nWe can observe that for \\(|v/w|&lt;1\\) the state is localized near the edges of the chain and for \\(|v/w|\\geq1\\) this state is now unlocalized. In other words, for \\(|v/w|&lt;1\\) we observe an edge state and for \\(|v/w|\\geq1\\) it becomes a bulk state.\n\n\nCode\nimport plotly.graph_objects as go\ncuadros = []\nNL=len(evecs_SSH[0])//2\nfor i in range(len(V)):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(range(2*NL)), y=real(evecs_SSH[i][ed_SSH[i],:]),mode=\"lines\")],\n                             layout=go.Layout(title=f\"v/w={V[i]:.2f}\" ) ))\n\nfig = go.Figure(\n    data=[go.Scatter(x=list(range(2*NL)), y=real(evecs_SSH[0][ed_SSH[0],:]),  mode=\"lines\")],\n    layout=go.Layout(\n        title=f\"v/w={V[0]:.2f}\",\n        xaxis_title=\"Site index\",\n        yaxis_title=\"Wave function\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.9,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\n\nfig.update_xaxes(range=[0,2*NL])\nfig.update_layout(\n    autosize=False,\n    width=600,\n    height=400,\n)\n\nfig.show()\n\n\n                                                \n\n\n\n\n\n\n\n\n\n\n\nEdge state Kitaev chain\n\n\n\n\n\nIn this case we separate the description of the electron and holes for visualization purposes. We observe how the state of both electrons and holes is well localized in the edges of the chain for \\(|\\mu/t|\\leq2\\) and the state becomes a bulk state in other cases. This is the case for every value of \\(\\Delta\\neq0\\).\n\n\nCode\nimport plotly.graph_objects as go\ncuadros = []\nNL=len(evecs_KC[0])//2\nfor i in range(len(M)):\n    cuadros.append( go.Frame(data=[go.Scatter(x=list(range(NL)), y=abs(evecs_KC[i][ed_KC[i],:][::2])**2,mode=\"lines\"),\n    go.Scatter(x=list(range(NL)), y=abs(evecs_KC[i][ed_KC[i],:][1::2])**2,mode=\"lines\")],\n                             layout=go.Layout(title=f\"μ/t={M[i]:.2f}, Δ={Δ:.2f}\") ))\n\nfig = go.Figure(\n     data=[go.Scatter(x=list(range(NL)), y=abs(evecs_KC[0][ed_KC[0],:][::2])**2, name=\"Electron distribution\", mode=\"lines\"),\n    go.Scatter(x=list(range(NL)), y=abs(evecs_KC[0][ed_KC[0],:][1::2])**2,name=\"Hole distribution\",  mode=\"lines\")],\n    layout=go.Layout(\n        title=f\"μ/t={M[0]:.2f}, Δ={Δ:.2f}\",\n        xaxis_title=\"n\",\n        yaxis_title=r\"Probability distribution\",\n        updatemenus=[dict(type=\"buttons\",\n                          x=1.0,y=.9,\n                          buttons=[dict(label=\"Play\",\n                                        method=\"animate\",\n                                        args=[None,\n                                        dict(frame=dict(duration=30,redraw=True),\n                                        transition=dict(duration=0,easing=None))] )])]\n\n    ),\n    frames = cuadros\n)\nfig.update_layout(\n    autosize=False,\n    width=600,\n    height=400,\n)\nfig.update_xaxes(range=[0,NL])\nfig.show()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Topological 1D systems</span>"
    ]
  },
  {
    "objectID": "Hexagonal.html",
    "href": "Hexagonal.html",
    "title": "2  2D topological systems",
    "section": "",
    "text": "2.1 Haldane model\nWe begin by constructing the Haldane model for graphene, which consists on adding a second neighbourgh complex hopping to break time reversal symmetry and consider that both orbitals on the graphene unit cell have a different onsite energy, which is called the Semenof mass.\nCode\nfrom pythtb import *\nfrom pylab import *\n\ndef Haldane_model(t2=0.03,phi=0,M=0,tx=1,ty=1,tz=1):\n  a1=np.array([3/2,-sqrt(3)/2])\n  a2=np.array([3/2,sqrt(3)/2])\n\n  lat=np.array([a1,a2])\n  orb=[[1/3,1/3],[2/3,2/3]]\n\n  HM=tb_model(2,2,lat,orb)\n  HM.set_hop(tx,0,1,[0,0]) \n  HM.set_hop(ty,1,0,[0,1])\n  HM.set_hop(tz,1,0,[1,0])\n\n  HM.set_hop(t2*exp(1j*phi),0,0,[1,0])\n  HM.set_hop(t2*exp(1j*phi),1,1,[1,-1])\n  HM.set_hop(t2*exp(1j*phi),1,1,[0,1])\n\n  #t2C=t2.conjugate()\n  #HM.set_hop(t2C*exp(-1j*phi),1,1,[1,0])\n  #HM.set_hop(t2C*exp(-1j*phi),0,0,[1,-1])\n  #HM.set_hop(t2C*exp(-1j*phi),0,0,[0,1])\n\n  HM.set_hop(t2*exp(1j*phi),1,1,[-1,0])\n  HM.set_hop(t2*exp(1j*phi),0,0,[-1,1])\n  HM.set_hop(t2*exp(1j*phi),0,0,[0,-1])\n  HM.set_onsite([M,-M])\n\n  return HM\n\ndef Graph_Ribbon_AC(t2,phi,L,M=0,tx=1,ty=1,tz=1):\n  \n  HM = Haldane_model(t2,phi=phi,M=M,tx=tx,ty=ty,tz=tz)\n  GR_AC = HM.make_supercell([[1,-2],[1,1]])\n\n  return GR_AC.cut_piece(L,0)\n\ndef Graph_AC_Fin(t2,phi,Lx=2,Ly=2,M=0,tx=1,ty=1,tz=1):\n\n  GR_AC = Graph_Ribbon_AC(t2,phi,Lx,M=M,tx=tx,ty=ty,tz=tz)\n\n  return GR_AC.cut_piece(Ly,1)\n\ndef Graph_Ribbon_ZZ(t2,phi,L=2,M=0,tx=1,ty=1,tz=1):\n\n  HM = Haldane_model(t2,phi=phi,M=M,tx=tx,ty=ty,tz=tz)\n\n  GR_ZZ = HM.make_supercell([[1,1],[-1,1]])\n\n  return GR_ZZ.cut_piece(L,0)\n\nHaldane_model(1j,0,M=0.3).visualize(1,0,color_hoppings=True)\n#Graph_Ribbon_AC(1.,phi=pi/2,L=3,M=0.3).visualize(0,1)\n#Graph_AC_Fin(1j,0,M=0.3).visualize(0,1,color_hoppings=True)\n#Graph_Ribbon_ZZ(1,pi/2,L=1,M=0.3).visualize(0,1,color_hoppings=True)\nWe now graph the band structure of two graphene ribbons with different unit cells when we consider a nonzero Semmenof mass and \\(\\phi=\\pi/2\\), that is, for an entirely complex second neighbour hopping.\nFor the zig-zag cut we can observe an exact zero mode for \\(|M/t_2|&lt;3\\sqrt(3)\\) and a gap for \\(|M/t_2|&gt;3\\sqrt(3)\\). A relevant observation to be made is that the bands are no longer even functions of the crystal momentum, which indicates time reversal asymmetry.\nThe presence of an edge state with breaking of time reversal symmetry constitutes the anomalous quantum Hall effect and is considered the first Chern insulator.\nCode\nt2=0.03\nphi=pi/2\nM=0.1\nL=30\nk = linspace(0,1,501)\ntb=Graph_Ribbon_ZZ(t2,phi=phi,M=M,L=L)\ntb.visualize(1,0)\nplt.show()\n\nEk,U = tb.solve_all(k,eig_vectors=True)\nNband,Nk,Nsites = shape(U)\nkvec = outer(ones(Nband),k)\nIPR = real( sum(U*conj(U)*U*conj(U),axis=2))\nscatter(kvec,Ek,c=IPR,cmap='coolwarm',s=1)\ncolorbar()\nplt.show()\nHowever, for an armchair cut the system is always gapped and the edge states do not break time reversal symmetry. This is because in this configuration there are the same number of orbitals in the unit cell, whereas in the zig-zag unit cell there is an excess of a certain type of orbitals in the edge of the ribbon.\nCode\nt2=0.03\nphi=pi/2\nM=0.\nL=10\nk = linspace(-0.5,0.5,501)\ntb=Graph_Ribbon_AC(t2,phi=phi,M=M,L=L)\ntb.visualize(1,0)\nplt.show()\n\nEk,U = tb.solve_all(k,eig_vectors=True)\nNband,Nk,Nsites = shape(U)\nkvec = outer(ones(Nband),k)\nIPR = real( sum(U*conj(U)*U*conj(U),axis=2))\nscatter(kvec,Ek,c=IPR,cmap='coolwarm',s=1)\ncolorbar()\nplt.show()\nIn order to characterize this model we construct the phase diagram by calculating the Chern number using PythTB.\nCode\ndef Chern_Number(model): # Only works if there is no degeneracy points in the band structure\n  K_array=wf_array(model,[11,11])\n  K_array.solve_on_grid([-0.5,-0.5])\n  Chern = [ K_array.berry_flux([i])/(2*pi) for i in range(model._norb) ]\n  return Chern \n\nt2=0.1\nPhi_path,M_path = linspace(-pi,pi,101),linspace(-3*sqrt(3)*t2,3*sqrt(3)*t2,101)\n\nChern_array = np.array( [[ Chern_Number(Haldane_model(t2,phi=phi,M=M))[0] for phi in Phi_path ] for M in M_path] )\n\nfig,ax=plt.subplots(figsize=(6,4))\nX, Y = np.meshgrid(M_path,Phi_path)\ncp = ax.contourf(X, Y, Chern_array,cmap='jet',levels=np.linspace(Chern_array.min(),Chern_array.max(),100))\ncbar = colorbar(cp,ticks=linspace(Chern_array.min(),Chern_array.max(),3)) \nax.set_xlabel('$\\phi$')\nax.set_ylabel('$M$')\ncbar.ax.set_ylabel('Chern number', rotation=270, labelpad = 11)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>2D topological systems</span>"
    ]
  },
  {
    "objectID": "Hexagonal.html#chern-number-of-haldane-model",
    "href": "Hexagonal.html#chern-number-of-haldane-model",
    "title": "2  2D topological systems",
    "section": "2.2 Chern number of Haldane model",
    "text": "2.2 Chern number of Haldane model\nWe reconstruct Haldane’s model phase diagram by calculating the Chern number using PythTB.\n\n\nCode\ndef Chern_Number(model): # Only works if there is no degeneracy points in the band structure\n  K_array=wf_array(model,[11,11])\n  K_array.solve_on_grid([-0.5,-0.5])\n  Chern = [ K_array.berry_flux([i])/(2*pi) for i in range(model._norb) ]\n  return Chern \n\nt2=0.1\nPhi_path,M_path = linspace(-pi,pi,11),linspace(-3*sqrt(3)*t2,3*sqrt(3)*t2,11)\n\nChern_array = np.array( [[ Chern_Number(Haldane_model(t2,phi=phi,M=M))[0] for phi in Phi_path ] for M in M_path] )\n\nfig,ax=plt.subplots(figsize=(6,4))\nX, Y = np.meshgrid(M_path,Phi_path)\ncp = ax.contourf(X, Y, Chern_array,cmap='jet',levels=np.linspace(Chern_array.min(),Chern_array.max(),100))\ncbar = colorbar(cp,ticks=linspace(Chern_array.min(),Chern_array.max(),3)) \nax.set_xlabel('$M$')\nax.set_ylabel('$\\phi$')\ncbar.ax.set_ylabel('Chern number', rotation=270, labelpad = 11)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>2D topological systems</span>"
    ]
  },
  {
    "objectID": "Hexagonal.html#kane-mele-model-quantum-spin-hall-effect",
    "href": "Hexagonal.html#kane-mele-model-quantum-spin-hall-effect",
    "title": "2  2D topological systems",
    "section": "2.2 Kane-Mele model: Quantum Spin Hall Effect",
    "text": "2.2 Kane-Mele model: Quantum Spin Hall Effect\nThe Kane-Mele model can be seen as a generalization of the Haldane model adding the spin degree of freedom. In this model we take to copies of the Haldane model, one for spin up and another for spin down. We then add the spin-orbit interaction in the form a complex second neighbour interaction within each copie of the Haldane model (the intrinsic spin-orbit interaction) and a complex second neighbour interaction between both copies which is called the Rashba effect.\n\n\nCode\nfrom pythtb import *\nfrom pylab import *\n\ndef KaneMele(λI=0.06,M=0.3,λR=0.05,t1=1,t2=0):\n\n  a1=np.array([1,0])\n  a2=np.array([1/2,sqrt(3)/2])\n\n  lat=np.array([a1,a2])\n  orb=[[1/3,1/3],[2/3,2/3], # Haldane model spin up\n      [1/3,1/3],[2/3,2/3]]  # Haldane model spin down\n\n  KM=tb_model(2,2,lat,orb)\n  KM.set_hop(t1,0,1,[0,0]) \n  KM.set_hop(t1,1,0,[0,1])\n  KM.set_hop(t1,1,0,[1,0])\n  KM.set_hop(t1,2,3,[0,0]) \n  KM.set_hop(t1,3,2,[0,1])\n  KM.set_hop(t1,3,2,[1,0])\n#  # Second neighbours spin up\n  KM.set_hop(t2+1j*λI,0,0,[1,0])\n  KM.set_hop(t2+1j*λI,1,1,[1,-1])\n  KM.set_hop(t2+1j*λI,1,1,[0,1])\n  KM.set_hop(t2+1j*λI,1,1,[-1,0])\n  KM.set_hop(t2+1j*λI,0,0,[-1,1])\n  KM.set_hop(t2+1j*λI,0,0,[0,-1])\n  # Second neighbours spin down\n  KM.set_hop(t2-1j*λI,2,2,[1,0])\n  KM.set_hop(t2-1j*λI,3,3,[1,-1])\n  KM.set_hop(t2-1j*λI,3,3,[0,1])\n  KM.set_hop(t2-1j*λI,3,3,[-1,0])\n  KM.set_hop(t2-1j*λI,2,2,[-1,1])\n  KM.set_hop(t2-1j*λI,2,2,[0,-1])\n  # Rashba effect \n  # Same x and y axis for spin \n  KM.set_hop(-1j*λR,0,3,[0,0])\n  KM.set_hop(1j*(-0.5+sqrt(3)*0.5j)*λR,0,3,[0,1])\n  KM.set_hop(1j*(-0.5-sqrt(3)*0.5j)*λR,0,3,[1,0])\n  KM.set_hop(-1j*λR,1,2,[0,0])\n  KM.set_hop(1j*(-0.5+sqrt(3)*0.5j)*λR,1,2,[0,1])\n  KM.set_hop(1j*(-0.5-sqrt(3)*0.5j)*λR,1,2,[1,0])\n\n  KM.set_onsite([M,-M,M,-M])\n\n  return KM\n\nKaneMele().visualize(1,0)\nplt.show()\n\n\n\n\n\n\n\n\n\nIf we set the Rashba parameter \\(λ_R\\) equal to zero, we get four bands with a well defined spin component.\n\n\nCode\nkpath = [[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]] # Gamma, K, M, K', Gamma\nλSO = 0.03\nM   = 0.3\nλR  = 0.0\n\ndef Gaps(model):\n  K_array=wf_array(model,[50,50])\n  gaps = K_array.solve_on_grid([0.,0.])\n  return gaps\n\ntb = KaneMele(λI=λSO,M=M,λR=λR)\nk_vec,k_dist,k_node = tb.k_path(kpath,501,report=False)\nEk,evec = tb.solve_all(k_vec,eig_vectors=True)\nG = Gaps(tb)\n\nsz = diag([1,1,-1,-1])\nSz = [ [ real(vdot(ev,dot(sz,ev))) for ev in evec[band]] for band in range(len(Ek)) ]\n\nfor i in range(len(Ek)):\n  scatter(k_dist,Ek[i],s=1,c=Sz[i],cmap='coolwarm', vmin=-1.1, vmax=1.1) \nplt.title(\"Kane-Mele energy bands without the Rashba effect\")\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\ngrid(True)\ncolorbar(label='Expectancy value of $S_z$')\nplt.show()\n\n\n\n\n\n\n\n\n\nIf we now consider the Rashba effect to be non zero we can observe how the energy bands start having an expectancy value of each spin component to be non zero on different parts of the energy bands.\n\n\nCode\nkpath = [[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]] # Gamma, K, M, K', Gamma\n\nλSO=0.03\nM=0.3\nλR=0.01\n\n# Band structure\nk_vec,k_dist,k_node = KaneMele(λI=λSO,M=M,λR=λR).k_path(kpath,501,report=False)\nEk,evec = KaneMele(λI=λSO,M=M,λR=λR).solve_all(k_vec,eig_vectors=True)\n\n# Spin components for every Bloch state\nσx,σy,σz = np.array([[0,1],[1,0]]), np.array([[0,-1j],[1j,0]]), np.array([[1,0],[0,-1]])\nsx, sy, sz = kron(σx,diag([1,1])),kron(σy,diag([1,1])),kron(σz,diag([1,1]))\nSx = [ [ real(vdot(ev,dot(sx,ev))) for ev in evec[band]] for band in range(len(Ek)) ]\nSy = [ [ real(vdot(ev,dot(sy,ev))) for ev in evec[band]] for band in range(len(Ek)) ]\nSz = [ [ real(vdot(ev,dot(sz,ev))) for ev in evec[band]] for band in range(len(Ek)) ]\n\nfig,ax=plt.subplots(1,3,figsize=(11,4))\nfor i in range(len(Ek)):\n  sc=ax[0].scatter(k_dist,Ek[i],s=1,c=Sx[i],cmap='coolwarm', vmin=-1.1, vmax=1.1) \n  sc=ax[1].scatter(k_dist,Ek[i],s=1,c=Sy[i],cmap='coolwarm', vmin=-1.1, vmax=1.1) \n  sc=ax[2].scatter(k_dist,Ek[i],s=1,c=Sz[i],cmap='coolwarm', vmin=-1.1, vmax=1.1) \nax[0].set_xticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nax[1].set_xticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nax[2].set_xticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nax[0].set_title(\"Spin x\")\nax[1].set_title(\"Spin y\")\nax[2].set_title(\"Spin z\")\nax[0].grid(True)\nax[1].grid(True)\nax[2].grid(True)\nfig.colorbar(sc)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\nimport itertools as itertools\n\nλSO = 0.03\nM   = 0.3\nλR  = 0.0\n\nNk=300\nKx=np.linspace(-1,1,Nk)\nKy=np.linspace(-1,1,Nk)\nL_k = np.array(list(itertools.product(Kx, Ky)))\nL_Ek = KaneMele(λI=λSO,M=M,λR=λR).solve_all(L_k)\nBands = [L_Ek[i].reshape((Nk,Nk)) for i in range(len(L_Ek))]\n\nfig = go.Figure(data=[go.Surface(z=Bands[0], x= Kx, y=Ky,colorscale='twilight', cmin=-2, cmax=2)]\n              +[go.Surface(z=Band, x= Kx, y=Ky, showscale=False, colorscale='twilight', cmin=-2, cmax=2) for Band in Bands[1:]])\nfig.update_layout(title='Kane - Melee model band structure',autosize=False,\n                  width=500, height=500,\n                   margin=dict(l=65, r=50, b=65, t=90),\n                   scene = {\n            \"xaxis\": {\"nticks\": 4},\n            \"yaxis\": {\"nticks\": 4},\n            \"zaxis\": {\"nticks\": 4},\n#            'camera_eye': {\"x\": 0, \"y\": -1, \"z\": 0.5},\n            \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 1}\n        })\nfig.show()\n\n\n                                                \n\n\nA relevant observation of this model is the presence of edge states for a zig-zag edge even when we consider a nonzero Rashba effect. This constitutes the quantum spin Hall effect and we can observe how time reversal symmetry is unchanged.\n\n\nCode\nfig,ax=plt.subplots(1,2,figsize=(11,4))\nL=10\nλSO=0.03 \nλR=0.02\nk = linspace(0.,1.,301)\n\nM=0.1\nKM_RibbonZZ=KaneMele(λI=λSO,M=M,λR=λR).cut_piece(L,0)\nEk,evec = KM_RibbonZZ.solve_all(k,eig_vectors=True)\nsz = diag(L*[1,1,-1,-1])\nSz = [ [ real(vdot(ev,dot(sz,ev))) for ev in evec[band]] for band in range(len(Ek)) ]\nfor i in range(len(Ek)):\n  sc=ax[0].scatter(k,Ek[i],s=1,c=Sz[i],cmap='coolwarm', vmin=-1.1, vmax=1.1) \nax[0].set_title(\"QSH phase\")\nax[0].set_ylim(-1,1)\nax[0].grid(True)\n\nM=0.4\nKM_RibbonZZ=KaneMele(λI=λSO,M=M,λR=λR).cut_piece(L,0)\nEk,evec = KM_RibbonZZ.solve_all(k,eig_vectors=True)\nsz = diag(L*[1,1,-1,-1])\nSz = [ [ real(vdot(ev,dot(sz,ev))) for ev in evec[band]] for band in range(len(Ek)) ]\nfor i in range(len(Ek)):\n  sc=ax[1].scatter(k,Ek[i],s=1,c=Sz[i],cmap='coolwarm', vmin=-1.1, vmax=1.1) \nax[1].set_title(\"Insulating phase\")\nax[1].set_ylim(-1,1)\nax[1].grid(True)\n\nfig.colorbar(sc)\nplt.show()\n\n\n\n\n\n\n\n\n\nIn order to characterize correctly this system we turn to the \\(Z_2\\) index which basically counts the number of pairs of zeros of the overlap matrix of the time-reversal operator (the Pfaffian) on the unit cell reciprocal space. We show an example of this calculation for parameters on the QSH phase.\n\n\nCode\ndef Pfaffian(model,k_vec):\n  Pf=[]\n  for k in k_vec:\n    Ek,evec = model.solve_one(k,eig_vectors=True)\n    nF = model._norb//2\n    σy=np.array([[0,-1j],[1j,0]])\n    sy = kron(σy,diag(nF*[1]))\n    T = np.array( [[ vdot(ev1,dot(-1j*sy,conj(ev2)) )  for ev1 in evec[Ek&lt;0]] for ev2 in evec[Ek&lt;0]] )\n    Pf.append(sqrt(det(T)))\n  Pf=np.array(Pf)\n  return Pf\n\ndef Pffafian_one(model):\n  def Pf(k):\n    Ek,evec = model.solve_one(k,eig_vectors=True)\n    nF = model._norb//2\n    σy=np.array([[0,-1j],[1j,0]])\n    sy = kron(σy,diag(nF*[1]))\n    T = np.array( [[ vdot(ev1,dot(-1j*sy,conj(ev2)) )  for ev1 in evec[Ek&lt;0]] for ev2 in evec[Ek&lt;0]] )\n    return sqrt(det(T))\n  return Pf\n\nkpts = [[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]]\nλSO=0.03\nM=0.1\nλR=0.01 #0.1476\n\ndef Z2_inv(model,k_vec):\n  Z2=0\n  P = Pffafian_one(model)\n  for k in k_vec:\n    if abs(P(k))&lt;10e-15:\n      Z2+=1\n  return Z2\n\ntb=KaneMele(λI=λSO,M=M,λR=λR)\nk_vec,k_dist,k_node = tb.k_path(kpts,nk=501,report=False)\nz2=Z2_inv(tb,k_vec)\nPf=Pfaffian(tb,k_vec)\ntitle(\"$\\mathbb{Z}_2$ invariant \"+f\"= {z2:.0f}\")\nplot(k_dist,abs(Pf),c='k')\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nplt.show()\n\n\n\n\n\n\n\n\n\nA relevant observation to be made is that the pfaffian may only be zero on high symmetry points of the lattice (I’ll add an argument for this in the future). However this is not obvious at first glance and because of it I calculate the absolute value of the pfaffian over many points of the reciprocal space.\n\n\nCode\nimport itertools as itertools\n\nNk=300\nKx = np.linspace(0,1,Nk)\nKy = np.linspace(0,1,Nk)\nL_k = np.array(list(itertools.product(Kx, Ky)))\nL_Pf = Pfaffian(KaneMele(λI=λSO,M=M,λR=λR),L_k).reshape((Nk,Nk))\n\nfig,ax=plt.subplots(figsize=(6,4))\n# Contour plot of abs.value of pfaffian\nz=abs(L_Pf)\nX, Y = np.meshgrid(Kx, Ky)\ncp = ax.contourf(Kx, Ky, z,levels=np.linspace(0,1,300),cmap='gist_stern')\ncbar = colorbar(cp,ticks=linspace(0,1,5))\n# Hexagonal grid\nfor p in np.array([ [x,y] for x in range(-1,2) for y in range(-1,2)]):\n  Hex=np.array([[2/3,1/3],[1/3,2/3],[-1/3,1/3],[-2/3,-1/3]])+p\n  ax.plot(Hex.T[0],Hex.T[1],c='gray', linestyle='dashed')\n\nax.set_xlabel('$k_x$')\nax.set_ylabel('$k_y$')\nax.set_aspect('equal', adjustable='box')\nax.set_xlim(0,1)\nax.set_ylim(0,1)\ncbar.ax.set_ylabel(\"|Pf|\", rotation=270, labelpad = 11);\n\n\n\n\n\n\n\n\n\nFor better observation of this values I add a 3D graph of the absolute value of the pfaffian.\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\n\nz=abs(L_Pf)\nfig = go.Figure(data=[go.Surface(z=z, x= Kx, y=Ky,colorscale='Blues_r', cmin=0, cmax=1)])\nfig.update_layout(title='|Pf(k)| for Kane Mele model',autosize=False,\n                  width=500, height=500,\n                   margin=dict(l=65, r=50, b=65, t=90),\n                   scene = {\n            \"xaxis\": {\"nticks\": 4},\n            \"yaxis\": {\"nticks\": 4},\n            \"zaxis\": {\"nticks\": 4},\n#            'camera_eye': {\"x\": 0, \"y\": -1, \"z\": 0.5},\n            \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 1}\n        })\nfig.show()\n\n\n                                                \n\n\nWe can observe how the only values where the Pfaffian is zero are the high symmetry points \\(K\\) and \\(K'\\). We the calculate the number of pairs of zeros varying the Semenoff mass and the Rashba parameter.\n\n\nCode\ndef Z2_inv(model,k_vec):\n  Z2=0\n  P = Pffafian_one(model)\n  for k in k_vec:\n    if abs(P(k))&lt;10e-15:\n      Z2+=1\n  return Z2\n\nλSO = 0.03\nM_path = linspace(-6*λSO,6*λSO,100)\nλR_path = linspace(-6*λSO,6*λSO,100)\nkpath = [[2/3,1/3],[1/2,1/2],[1/3,2/3]]\nk_vec,k_dist,k_node = KaneMele().k_path(kpath,nk=501,report=False)\n\nZ2 = [ [ Z2_inv(KaneMele(λI=λSO,M=M,λR=λR),k_vec) for M in M_path ] for λR in λR_path]\n\nfig,ax=plt.subplots(figsize=(6,4))\nX, Y = np.meshgrid(M_path, λR_path)\ncp = ax.contourf(X, Y, Z2,levels=np.linspace(0,2,300),cmap='Blues')\ncbar = colorbar(cp,ticks=linspace(0,2,3))\nax.set_xlabel('$M$')\nax.set_ylabel('$λ_R$')\ncbar.ax.set_ylabel(\"$\\mathbb{Z}_2$ invariant\", rotation=270, labelpad = 11)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nWe can easily observe three phases with different \\(Z_2\\) invariants, being the QSH phase the one characterized by 2 and the insulating phase by 0 and 1.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>2D topological systems</span>"
    ]
  },
  {
    "objectID": "Hexagonal.html#z2-index-of-haldane-model",
    "href": "Hexagonal.html#z2-index-of-haldane-model",
    "title": "2  2D topological systems",
    "section": "2.3 Z2 index of Haldane model",
    "text": "2.3 Z2 index of Haldane model\nDebo analizar mejor esto…\n\n\nCode\ndef Pffafian_one(model):\n  def Pf(k):\n    Ek,evec = model.solve_one(k,eig_vectors=True)\n    nF = model._norb//2\n    T = np.array( [[ vdot(ev1,dot(-1j,conj(ev2)) )  for ev1 in evec[Ek&lt;0]] for ev2 in evec[Ek&lt;0]] )\n    return sqrt(det(T))\n  return Pf\n\ndef Pfaffian(model,k_vec):\n  Pf=[]\n  for k in k_vec:\n    Ek,evec = model.solve_one(k,eig_vectors=True)\n    nF = model._norb//2\n    T = np.array( [[ vdot(ev1,dot(-1j,conj(ev2)) )  for ev1 in evec[Ek&lt;0]] for ev2 in evec[Ek&lt;0]] )\n    Pf.append(sqrt(det(T)))\n  Pf=np.array(Pf)\n  return Pf\n\ndef Z2_inv(model,k_vec):\n  Z2=0\n  P = Pffafian_one(model)\n  for k in k_vec:\n    if abs(P(k))&lt;10e-8:\n      Z2+=1\n  return Z2\n\nt2=0.4\nphi=pi/2\nM=0\ntb=Haldane_model(t2=t2,phi=phi,M=M)\nkpts = [[0,0],[1/3,1/3],[1/2,1/2],[1/3,1/3],[0,0]]\nk_vec,k_dist,k_node = tb.k_path(kpts,nk=1001,report=False)\nz2=Z2_inv(tb,k_vec)\nPf=Pfaffian(tb,k_vec)\ntitle(\"$\\mathbb{Z}_2$ invariant \"+f\"= {z2:.0f}\")\nplot(k_dist,abs(Pf),c='k')\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nt2=1\nphi=pi/2\nM=0\ntb=Haldane_model(t2=t2,phi=phi,M=M)\nkpts = [[0,0],[1/3,1/3],[1/2,1/2],[1/3,1/3],[0,0]]\nk_vec,k_dist,k_node = tb.k_path(kpts,nk=501,report=False)\nz2=Z2_inv(tb,k_vec)\nPf=Pfaffian(tb,k_vec)\ntitle(\"$\\mathbb{Z}_2$ invariant \"+f\"= {z2:.0f}\")\nplot(k_dist,abs(Pf),c='k')\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport itertools as itertools\ntb=Haldane_model(t2=t2,phi=phi,M=M)\nNk=300\nKx = np.linspace(0,1,Nk)\nKy = np.linspace(0,1,Nk)\nL_k = np.array(list(itertools.product(Kx, Ky)))\nL_Pf = Pfaffian(tb,L_k).reshape((Nk,Nk))\n\n\n\n\nCode\nfig,ax=plt.subplots(figsize=(6,4))\n# Contour plot of abs.value of pfaffian\nz=abs(L_Pf)\nX, Y = np.meshgrid(Kx, Ky)\ncp = ax.contourf(Kx, Ky, z,levels=np.linspace(0,1,300),cmap='gist_stern')\ncbar = colorbar(cp,ticks=linspace(0,1,5))\n# Hexagonal grid\nfor p in np.array([ [x,y] for x in range(-1,2) for y in range(-1,2)]):\n  Hex=np.array([[2/3,1/3],[1/3,2/3],[-1/3,1/3],[-2/3,-1/3]])+p\n  ax.plot(Hex.T[0],Hex.T[1],c='gray', linestyle='dashed')\n# Path over special points \n# Special_pts = [[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]]\n# Special_pts = np.array(Special_pts)\n# ax.scatter(Special_pts.T[0],Special_pts.T[1],c='k')\n# ax.plot(Special_pts.T[0],Special_pts.T[1],c='k')\n\nax.set_xlabel('$k_x$')\nax.set_ylabel('$k_y$')\n#ax.set_aspect('equal', adjustable='box')\nax.set_xlim(0,1)\nax.set_ylim(0,1)\ncbar.ax.set_ylabel(\"|Pf|\", rotation=270, labelpad = 11);",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>2D topological systems</span>"
    ]
  },
  {
    "objectID": "Hexagonal.html#kitaev-model",
    "href": "Hexagonal.html#kitaev-model",
    "title": "2  2D topological systems",
    "section": "2.5 Kitaev model",
    "text": "2.5 Kitaev model\nWe now study the Kitaev honeycomb model in the Majorana basis which is modeled by a graphene-like structure with different hoppings that represent the spin-spin interaction between electrons.\n\n\nCode\nfrom pythtb import *\nfrom pylab import *\n\ndef Kitaev_Honeycomb(Jx=1,Jy=1,Jz=1):\n  a1=np.array([3/2,-sqrt(3)/2])\n  a2=np.array([3/2,sqrt(3)/2])\n\n  lat=np.array([a1,a2])\n  orb=[[1/3,1/3],[2/3,2/3]]\n\n  KH=tb_model(2,2,lat,orb)\n  KH.set_hop(Jx,0,1,[0,0]) \n  KH.set_hop(Jy,1,0,[0,1])\n  KH.set_hop(Jz,1,0,[1,0])\n\n  return KH\n\nKitaev_Honeycomb(Jx=2,Jy=3).visualize(1,0)\n\n\n\n\n\n\n\n\n\n\n\nCode\ndef Chern_Number(model):\n  K_array=wf_array(model,[11,11])\n  K_array.solve_on_grid([-0.5,-0.5])\n  Chern = [ K_array.berry_flux([i])/(2*pi) for i in range(model._norb) ]\n  return Chern \n\ndef Pfaffian(model,k_vec):\n  Pf=[]\n  for k in k_vec:\n    Ek,evec = model.solve_one(k,eig_vectors=True)\n    nF = model._norb//2\n#    σy=np.array([[0,-1j],[1j,0]])\n#    sy = kron(σy,diag(nF*[1]))\n    T = np.array( [[ vdot(ev1,dot(-1j,conj(ev2)) )  for ev1 in evec[Ek&lt;0]] for ev2 in evec[Ek&lt;0]] )\n    Pf.append(sqrt(det(T)))\n  Pf=np.array(Pf)\n  return Pf\n\ndef Pffafian_one(model):\n  def Pf(k):\n    Ek,evec = model.solve_one(k,eig_vectors=True)\n    nF = model._norb//2\n#    σy=np.array([[0,-1j],[1j,0]])\n#    sy = kron(σy,diag(nF*[1]))\n    T = np.array( [[ vdot(ev1,dot(-1j,conj(ev2)) )  for ev1 in evec[Ek&lt;0]] for ev2 in evec[Ek&lt;0]] )\n    return sqrt(det(T))\n  return Pf\n\ndef Z2_inv(model,k_vec):\n  Z2=0\n  P = Pffafian_one(model)\n  for k in k_vec:\n    if abs(P(k))&lt;10e-10:\n      Z2+=1\n  return Z2\n\n\n\n\nCode\nkpath = [[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]] # Gamma, K, M, K', Gamma\n\nJx,Jy,Jz=1,2,1\n\ntb = Kitaev_Honeycomb(Jx=Jx,Jy=Jy,Jz=Jz)\nk_vec,k_dist,k_node = tb.k_path(kpath,1001,report=False)\nEk,evec = tb.solve_all(k_vec,eig_vectors=True)\nCh=Chern_Number(tb)\n\nplot(k_dist,Ek.T)\nplt.title(f\"$J_x$ = {Jx:.3f}, $J_y$ = {Jy:.3f}, $J_z$ = {Jz:.3f} \\n Gap = {min(Ek[1])-max(Ek[0]):.3f}\\n Chern = {Ch[1]:.3f} \")\ngrid(True)\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nkpts = [[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]]\nJx,Jy,Jz=1,2,1\n\ndef Z2_inv(model,k_vec):\n  Z2=0\n  P = Pffafian_one(model)\n  for k in k_vec:\n    if abs(P(k))&lt;10e-10:\n      Z2+=1\n  return Z2\n\ntb=Kitaev_Honeycomb(Jx=Jx,Jy=Jy,Jz=Jz)\nk_vec,k_dist,k_node = tb.k_path(kpts,nk=101,report=False)\nz2=Z2_inv(tb,k_vec)\nPf=Pfaffian(tb,k_vec)\ntitle(\"$\\mathbb{Z}_2$ invariant \"+f\"= {z2:.0f}\")\nplot(k_dist,abs(Pf),c='k')\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"])\nylim(-0.1,1.1)\ngrid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport itertools as itertools\n\nNk  = 500\nKx  = np.linspace(0,1,Nk)  \nKy  = np.linspace(0,1,Nk)\nL_k = np.array(list(itertools.product(Kx, Ky)))\nL_Pf= Pfaffian(Kitaev_Honeycomb(Jx=Jx,Jy=Jy,Jz=Jz),L_k).reshape((Nk,Nk))\n\n\n\n\nCode\nabs(np.array(L_Pf)).min()\n\n\n0.0029011740284693734\n\n\n\n\nCode\nfig,ax=plt.subplots(figsize=(6,4))\n# Contour plot of abs.value of pfaffian\nz=abs(L_Pf)\nX, Y = np.meshgrid(Kx, Ky)\ncp = ax.contourf(Kx, Ky, z,levels=np.linspace(0,1,300),cmap='gist_stern')\ncbar = colorbar(cp,ticks=linspace(0,1,5))\n# Hexagonal grid\nfor p in np.array([ [x,y] for x in range(-1,2) for y in range(-1,2)]):\n  Hex=np.array([[2/3,1/3],[1/3,2/3],[-1/3,1/3],[-2/3,-1/3]])+p\n  ax.plot(Hex.T[0],Hex.T[1],c='gray', linestyle='dashed')\n\nax.set_xlabel('$k_x$')\nax.set_ylabel('$k_y$')\nax.set_aspect('equal', adjustable='box')\nax.set_xlim(0,1)\nax.set_ylim(0,1)\ncbar.ax.set_ylabel(\"|Pf|\", rotation=270, labelpad = 11);\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\n\nz=abs(L_Pf)\nfig = go.Figure(data=[go.Surface(z=z, x= Kx, y=Ky,colorscale='Blues_r', cmin=0, cmax=1)])\nfig.update_layout(title='|Pf(k)| for Kane Mele model',autosize=False,\n                  width=500, height=500,\n                   margin=dict(l=65, r=50, b=65, t=90),\n                   scene = {\n            \"xaxis\": {\"nticks\": 4},\n            \"yaxis\": {\"nticks\": 4},\n            \"zaxis\": {\"nticks\": 4},\n#            'camera_eye': {\"x\": 0, \"y\": -1, \"z\": 0.5},\n            \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 1}\n        })\nfig.show()\n\n\n                                                \n\n\nCambia la forma de la curva de raices del pfaffiano, pero no es posible definir al indice Z2, por el mismo motivo que en el caso del modelo Kane-Mele en el caso M=0.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>2D topological systems</span>"
    ]
  },
  {
    "objectID": "Floquet_Insulators.html",
    "href": "Floquet_Insulators.html",
    "title": "3  Floquet topological insulators",
    "section": "",
    "text": "En esta parte busco entender como construir sistemas Floquet.\nUso el sistema mostrado por I.Fulga en su articulo “Scattering matrix invariants of Floquet topological insulators”.\n\n\nCode\n# Kitaev Honeycomb model\nfrom pythtb import *\nfrom pylab import *\n\ndef Kitaev_Honeycomb(Jx=1,Jy=1,Jz=1,t2=0):\n  a1=np.array([1,0])\n  a2=np.array([1/2,sqrt(3)/2])\n\n  lat=np.array([a1,a2])\n  orb=[[1/3,1/3],[2/3,2/3]]\n\n  KH=tb_model(2,2,lat,orb)\n  KH.set_hop(Jx,0,1,[0,0]) \n  KH.set_hop(Jy,1,0,[0,1])\n  KH.set_hop(Jz,1,0,[1,0])\n\n  KH.set_hop(t2,0,0,[1,0])\n  KH.set_hop(t2,1,1,[1,-1])\n  KH.set_hop(t2,1,1,[0,1])\n\n  return KH\n\nKitaev_Honeycomb().visualize(0,1)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Contruyo el operador de Floquet para una nanocinta zig-zag siguiendo a I.C.Fulga\nW = 20\nT = 1\nJu = 0.225*4/T\nJs = pi/2*4/T\nt2 = 0 #0.03+0.1j\n\ntb1=Kitaev_Honeycomb(t2=t2,Jx=Ju+Js,Jy=Ju,Jz=Ju).cut_piece(W,0)\ntb2=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju+Js,Jz=Ju).cut_piece(W,0)\ntb3=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju,Jz=Ju+Js).cut_piece(W,0)\ntb4=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju,Jz=Ju).cut_piece(W,0)\n\ntb1.visualize(1,0)\n\nk_vec,k_dist,k_node=tb1.k_path([-0.5,0,0.5],501,report=False)\n\nfrom scipy.linalg import expm\n\nF = [ expm(-1j*T*tb1._gen_ham(k)/4)@expm(-1j*T*tb2._gen_ham(k)/4)@expm(-1j*T*tb3._gen_ham(k)/4)@expm(-1j*T*tb4._gen_ham(k)/4) for k in k_vec]\n\nEk,evec=[],[]\nfor i,k in enumerate(k_vec):\n    eval,eve = np.linalg.eig(F[i])\n    # Nicefy process\n    eval=real(1j*log(array(eval))/T) # Quasienergy\n    args=eval.argsort()\n    eval=eval[args]\n    eve = eve.T\n    eve = eve[args]\n    Ek.append(eval)\n    evec.append(eve)\nEk=array(Ek)\nevec=array(evec)\nIPR=sum(abs(evec)**4,2).T\n\n\n\n\n\n\n\n\n\n\n\nCode\nfor i,band in enumerate(Ek.T):\n    scatter(k_dist,band,s=1,c=IPR[i],vmax=1,vmin=0, cmap=\"jet\")\ncolorbar()\nxticks(k_node,[\"-$\\pi$\",0,\"$\\pi$\"]);\n\n\n\n\n\n\n\n\n\nVemos estados localizados en \\(E=0\\) y (para \\(T&gt;1.7\\)) en \\(E=\\pm\\pi\\). Estos ultimos son consecuencia de la existencia de un modo cero en la estructura original el cual surge de romper la simetria de subred en la frontera de la nanocinta zig-zag, no dependen de la simetria particula-hoyo o la reversión temporal, analogo al caso del grafeno.\n\n4 Entanglement entropy\nCalculo esta entropía en el espacio k de la nanocinta de red hexagonal.\n\n\nCode\ndef EEntropy(Ek,evec):\n  nF=len(evec[Ek&lt;0]) # Number of states on the Fermi sea\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Here we use chiral simmetry\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # We remove the eigenvalues that dont contribute\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return 2*SEE\n\ndef C_Spectre(evec):\n  nF=len(evec)//2 # Number of states on the Fermi sea\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=list(sort(np.linalg.eigvals(C)))\n  return ζ\n\nSee = real([ EEntropy(Ek[i],evec[i]) for i,k in enumerate(k_vec)])\nC_spec= array([ real(C_Spectre(evec[i])) for i,k in enumerate(k_vec)])\n\n\n\n\nCode\nfor i,band in enumerate(C_spec.T):\n    scatter(k_vec,band,s=1,c=-(band*np.log(band)+(1-band)*log(1-band)),vmax=0.15,vmin=-0.15, cmap=\"jet\")\ncolorbar();\n\n\nC:\\Users\\gozu0\\AppData\\Local\\Temp\\ipykernel_33052\\2703330373.py:2: RuntimeWarning: invalid value encountered in log\n  scatter(k_vec,band,s=1,c=-(band*np.log(band)+(1-band)*log(1-band)),vmax=0.15,vmin=-0.15, cmap=\"jet\")\nC:\\Users\\gozu0\\AppData\\Local\\Temp\\ipykernel_33052\\2703330373.py:2: RuntimeWarning: divide by zero encountered in log\n  scatter(k_vec,band,s=1,c=-(band*np.log(band)+(1-band)*log(1-band)),vmax=0.15,vmin=-0.15, cmap=\"jet\")\nC:\\Users\\gozu0\\AppData\\Local\\Temp\\ipykernel_33052\\2703330373.py:2: RuntimeWarning: invalid value encountered in multiply\n  scatter(k_vec,band,s=1,c=-(band*np.log(band)+(1-band)*log(1-band)),vmax=0.15,vmin=-0.15, cmap=\"jet\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot(k_vec,See/log(2))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Contruyo el operador de Floquet para una red 2D del modelo hexagonal de Kitaev \nT = 4\nJu = 0.225#*4/T\nJs = pi/2#*4/T\nt2 = 0 \n\ntb1=Kitaev_Honeycomb(t2=t2,Jx=Ju+Js,Jy=Ju,Jz=Ju)\ntb2=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju+Js,Jz=Ju)\ntb3=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju,Jz=Ju+Js)\ntb4=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju,Jz=Ju)\n\nk_vec,k_dist,k_node=tb1.k_path([[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]]\n                               ,501,report=False)\n\nfrom scipy.linalg import expm\n\nF = [ expm(-1j*T*tb1._gen_ham(k)/4)@expm(-1j*T*tb2._gen_ham(k)/4)@expm(-1j*T*tb3._gen_ham(k)/4)@expm(-1j*T*tb4._gen_ham(k)/4) for k in k_vec]\n\nEk,evec=[],[]\nfor i,k in enumerate(k_vec):\n    eval,eve = np.linalg.eig(F[i])\n    # Nicefy process\n    eval=real(1j*log(array(eval))/T) # Quasienergy\n    args=eval.argsort()\n    eval=eval[args]\n    eve = eve.T\n    eve = eve[args]\n    Ek.append(eval)\n    evec.append(eve)\nEk=array(Ek)\nevec=array(evec)\nIPR=sum(abs(evec)**4,2).T\n\nfor i,band in enumerate(Ek.T):\n    scatter(k_dist,band,s=1,c=IPR[i],vmax=1,vmin=0, cmap=\"jet\")\ncolorbar()\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"]);\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\nimport itertools as itertools\n\n\nNk=100\nKx=np.linspace(-1,1,Nk)\nKy=np.linspace(-1,1,Nk)\nL_k = np.array(list(itertools.product(Kx, Ky)))\n\nEk,evec=[],[]\nfor i,k in enumerate(L_k):\n    F = expm(-1j*T*tb1._gen_ham(k)/4)@expm(-1j*T*tb2._gen_ham(k)/4)@expm(-1j*T*tb3._gen_ham(k)/4)@expm(-1j*T*tb4._gen_ham(k)/4)\n    eval = np.linalg.eigvals(F)\n    eval=sort(real(1j*log(array(eval))/T)) \n    Ek.append(eval)\nL_Ek=array(Ek).T\n\nBands = [L_Ek[i].reshape((Nk,Nk)) for i in range(len(L_Ek))]\n\nfig = go.Figure(data=[go.Surface(z=Bands[0], x= Kx, y=Ky,colorscale='twilight', cmin=-2, cmax=2)]\n              +[go.Surface(z=Band, x= Kx, y=Ky, showscale=False, colorscale='twilight', cmin=-2, cmax=2) for Band in Bands[1:]])\nfig.update_layout(title='Floquet band structure of driven Kitaev model',autosize=False,\n                  width=500, height=500,\n                   margin=dict(l=65, r=50, b=65, t=90),\n                   scene = {\n            \"xaxis\": {\"nticks\": 4},\n            \"yaxis\": {\"nticks\": 4},\n            \"zaxis\": {\"nticks\": 4},\n#            'camera_eye': {\"x\": 0, \"y\": -1, \"z\": 0.5},\n            \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 1}\n        })\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nNo hay degeneración en las bandas, podemos calcular facilmente el número de Chern.\nPrimero, deseo visualizar la curvatura de Berry.\n\n\nCode\n# Contruyo el operador de Floquet para una red 2D del modelo hexagonal de Kitaev \n\ndef Kitaev_Driven(k_vec,Ju,Js,T=1,t2=0,eig_vectors=False):\n\n    tb1=Kitaev_Honeycomb(t2=t2,Jx=Ju+Js,Jy=Ju,Jz=Ju)\n    tb2=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju+Js,Jz=Ju)\n    tb3=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju,Jz=Ju+Js)\n    tb4=Kitaev_Honeycomb(t2=t2,Jx=Ju,Jy=Ju,Jz=Ju)\n\n    from scipy.linalg import expm\n    F = [ expm(-1j*T*tb1._gen_ham(k)/4)@expm(-1j*T*tb2._gen_ham(k)/4)@expm(-1j*T*tb3._gen_ham(k)/4)@expm(-1j*T*tb4._gen_ham(k)/4) for k in k_vec]\n\n    norb,nkp = len(F[0]), len(k_vec)\n    if(eig_vectors==False):\n        ret_eval=np.zeros((norb,nkp),dtype=float)\n        for i,k in enumerate(k_vec):\n            eval = np.linalg.eigvals(F[i]).T\n            ret_eval[:,i]=sort(real(1j*log(array(eval[:]))/T))\n        return ret_eval\n    else:\n        ret_eval=np.zeros((norb,nkp),dtype=float)\n        ret_evec=np.zeros((norb,nkp,norb),dtype=complex)\n        for i,k in enumerate(k_vec):\n            eval,eve = np.linalg.eig(F[i])\n            # Nicefy process\n            eval=real(1j*log(array(eval))/T) # Quasienergy\n            args=eval.argsort()\n            eval=eval[args]\n            eve = eve.T\n            eve = eve[args]\n            ret_eval[:,i]=eval[:]\n            ret_evec[:,i,:]=eve[:,:]\n        return ret_eval,ret_evec\n\n\nT = 4\nJu = 0.225#*4/T\nJs = pi/2#*4/T\nt2 = 0 \n\nk_vec,k_dist,k_node=tb1.k_path([[0,0],[2/3,1/3],[1/2,1/2],[1/3,2/3],[0,0]]\n                                ,301,report=False)\nEk,evec = Kitaev_Driven(k_vec,Ju,Js,eig_vectors=True)\nIPR=sum(abs(evec)**4,2)\n\nfor i,band in enumerate(Ek):\n    scatter(k_dist,band,s=1,c=IPR[i],vmax=1,vmin=0, cmap=\"jet\")\ncolorbar()\nxticks(k_node,[\"$\\Gamma$\",\"K\",\"M\",\"K'\",\"$\\Gamma$\"]);\n\n\n\n\n\n\n\n\n\n\n\nCode\nKitaev_Driven([[1,1]],Ju,Js,T=1,t2=0,eig_vectors=True)\n\n\n(array([[-1.85309725],\n        [ 1.85309725]]),\n array([[[ 0.35355339+0.61237244j,  0.70710678+0.j        ]],\n \n        [[ 0.70710678+0.j        , -0.35355339+0.61237244j]]]))\n\n\n\n\nCode\nnkpts = 301\nJu = 0.225\nJs = pi/2\n\nkmesh = Kitaev_Honeycomb().k_uniform_mesh((nkpts,nkpts))\nEk, U = Kitaev_Driven(kmesh,Ju,Js,eig_vectors=True)\n\ndef Curvatura(U0):\n    F = zeros( (nkpts-1,nkpts-1), dtype='complex' )\n    for n in range(nkpts-1):\n        for m in range(nkpts-1):\n            F[n,m] = imag(log(\\\n                vdot(U0[n+0,m+0],U0[n+1,m+0])*\\\n                vdot(U0[n+1,m+0],U0[n+1,m+1])*\\\n                vdot(U0[n+1,m+1],U0[n+0,m+1])*\\\n                vdot(U0[n+0,m+1],U0[n+0,m+0])))\n    return F\n\nU0 = U[0].reshape((nkpts,nkpts,2))\nF = Curvatura(U0)\nprint('Chern Number=',sum(F)/(2*pi))\nimshow(F.real)\ncolorbar()\n\n\nChern Number= (0.9993081020751858+0j)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Floquet topological insulators</span>"
    ]
  }
]