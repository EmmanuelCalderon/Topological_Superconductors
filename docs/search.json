[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Topological_Superconductors",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nHola Mundo.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html",
    "href": "Kitaev_Chain.html",
    "title": "2  Cadena de Kitaev",
    "section": "",
    "text": "2.1 Estructura de bandas\n%%capture\nXm = [-0.5]\nXp = [ 0.5]\npuntosK = [Xm,[0],Xp]\nEk=[]\nfor i in range(Nμ):\n  kpts, kdist, knode = KitaevChain[i].k_path(puntosK,101,report=True)\n  Ek.append(KitaevChain[i].solve_all(kpts,eig_vectors=False))\nfor i in range(0,Nμ,20):\n  fig,ax=plt.subplots(figsize=(5, 4))\n  ax.plot(kdist,Ek[i].T)\n  ax.set_xticks(knode)\n  ax.set_title(\"μ=\"+str(M[i]),fontsize=10)\n  ax.grid(True)\n  ax.set_xticklabels([\"-π\",0,\"π\"])\n\nC:\\Users\\gozu0\\AppData\\Local\\Temp\\ipykernel_10676\\1760376919.py:2: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig,ax=plt.subplots(figsize=(5, 4))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#fase-de-zak",
    "href": "Kitaev_Chain.html#fase-de-zak",
    "title": "2  Cadena de Kitaev",
    "section": "2.2 Fase de Zak",
    "text": "2.2 Fase de Zak\n\ndef Zak_Ph(model):\n  Nk=500\n  ptsK=[[0.],[1.]] # Debe ser la 1ZB\n  kpts, kdist, knode = model.k_path(ptsK,Nk,report=False)\n  ϵk,evec=model.solve_all(kpts,eig_vectors=True)\n  Zak=[]\n  for band in range(len(evec)):\n    eveb=evec[band]\n    Prod=prod([ np.vdot(eveb[i-1],eveb[i]) for i in range(1,Nk)])\n    Zak.append(-imag( np.log(Prod) ))\n  return Zak\n\n\nPhZak=list(map(Zak_Ph,KitaevChain))\nPhZak=np.array(PhZak)\n\n\nfig, (ax1,ax2) = plt.subplots(2,figsize=(8, 8))\n\nax1.plot(M,PhZak.T[0])\nax1.set_xlabel('$\\mu/t$')\nax1.set_ylabel('Fase de Zak \\n (banda valencia)')\nax1.grid(True)\n\nax2.plot(M,PhZak.T[1])\nax2.set_xlabel('$\\mu/t$')\nax2.set_ylabel('Fase de Zak \\n (banda conducción)')\nax2.grid(True)\nax2.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#estados-de-borde",
    "href": "Kitaev_Chain.html#estados-de-borde",
    "title": "2  Cadena de Kitaev",
    "section": "2.3 Estados de borde",
    "text": "2.3 Estados de borde\n\nNL=50\nKC_Cortado=[KitaevChain[i].cut_piece(NL,0,glue_edgs=False) for i in range(Nμ)]\nKC_Cortado[1].visualize(0,1)\n\n\n\n\n\n\n\n\n\n# Obtenemos todos los estados\nevals,evecs,ed=[],[],[]\nfor i in range(Nμ):\n  Ek,evec=KC_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(KC_Cortado[i].get_num_orbitals()//2) # Energia al centro del espectro, debe corresponder con el edo de borde\nevals=np.array(evals)\n\n\ndef ipr(edo):\n  abs=np.absolute(edo)**2\n  C2=sum(abs**2)\n  C4=sum(abs**4)\n  return C4/C2\n\n\nIPR=[list(map(ipr,evecs[i])) for i in range(Nμ)]\n\n# Mostramos estados de borde\nfor i in range(0,Nμ,20):\n  (fig,ax)=KC_Cortado[i].visualize(0,1,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"μ=\"+str(M[i])+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\pythtb.py:734: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig=plt.figure(figsize=[plt.rcParams[\"figure.figsize\"][0],",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#espectro-v.s.-mut",
    "href": "Kitaev_Chain.html#espectro-v.s.-mut",
    "title": "2  Cadena de Kitaev",
    "section": "2.4 Espectro v.s. \\(\\mu/t\\)",
    "text": "2.4 Espectro v.s. \\(\\mu/t\\)\n\ndef colorFader(c1,c2,mix=0): # Interpolación lineal del color c1 (en mix=0) al color c2 (mix=1)\n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Interpolación lineal de colores en lista Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\nfig, ax = plt.subplots(figsize=(10, 8))\nMax=np.max(np.max(IPR))\nMin=np.min(np.min(IPR))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nμ):\n    colors.append(Fader(Lc,(IPR[j][i]-Min)/(Max-Min)))\n  ax.scatter(M,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(10, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline((Max-Min)*x+Min, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.set_xlim(Min,Max)\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C)) # Hay que mejorar esta parte\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # Quitamos los que no contribuyen\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return SEE\n\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))\n  return ζ\n\n\nSee=list(map(EEntropy,KC_Cortado))\n\n\nfig, ax = plt.subplots(figsize=(9, 7))\nax.plot(M,See,c='black')\nax.set_xlabel('$\\mu/t$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entropia de entrelazamiento $S_A$')\nax.grid(True)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning: Casting complex values to real discards the imaginary part\n  return math.isfinite(val)\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1345: ComplexWarning: Casting complex values to real discards the imaginary part\n  return np.asarray(x, float)\n\n\n\n\n\n\n\n\n\n\nζ=np.array(list(map(C_Spectre,KC_Cortado)))\n\n\nfig, ax = plt.subplots(figsize=(10, 8))\nfor L in ζ.T:\n  ax.plot(M,L)\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('Espectro de $C$')\n  ax.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  }
]