[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Topological_Superconductors",
    "section": "",
    "text": "Preface\nIn this website we present a series of codes designed to study topological superconductors.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the\nBerry Phase in the Solid State.” Physical Review B 73\n(24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in\nPolyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701.\nhttps://doi.org/10.1103/PhysRevLett.42.1698.\n\n\nVanderbilt, David. 2018. Berry Phases in Electronic Structure\nTheory. First. Cambdridge University Press. https://doi.org/10.1017/9781316662205.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html",
    "href": "Kitaev_Chain.html",
    "title": "3  Cadena de Kitaev",
    "section": "",
    "text": "3.1 Estructura de bandas\n%%capture\nXm = [-0.5]\nXp = [ 0.5]\npuntosK = [Xm,[0],Xp]\nEk=[]\nfor i in range(Nμ):\n  kpts, kdist, knode = KitaevChain[i].k_path(puntosK,101,report=True)\n  Ek.append(KitaevChain[i].solve_all(kpts,eig_vectors=False))\nfor i in range(0,Nμ,20):\n  fig,ax=plt.subplots(figsize=(5, 4))\n  ax.plot(kdist,Ek[i].T)\n  ax.set_xticks(knode)\n  ax.set_title(\"μ=\"+str(M[i]),fontsize=10)\n  ax.grid(True)\n  ax.set_xticklabels([\"-π\",0,\"π\"])\n\nC:\\Users\\gozu0\\AppData\\Local\\Temp\\ipykernel_10676\\1760376919.py:2: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig,ax=plt.subplots(figsize=(5, 4))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#fase-de-zak",
    "href": "Kitaev_Chain.html#fase-de-zak",
    "title": "3  Cadena de Kitaev",
    "section": "3.2 Fase de Zak",
    "text": "3.2 Fase de Zak\n\ndef Zak_Ph(model):\n  Nk=500\n  ptsK=[[0.],[1.]] # Debe ser la 1ZB\n  kpts, kdist, knode = model.k_path(ptsK,Nk,report=False)\n  ϵk,evec=model.solve_all(kpts,eig_vectors=True)\n  Zak=[]\n  for band in range(len(evec)):\n    eveb=evec[band]\n    Prod=prod([ np.vdot(eveb[i-1],eveb[i]) for i in range(1,Nk)])\n    Zak.append(-imag( np.log(Prod) ))\n  return Zak\n\n\nPhZak=list(map(Zak_Ph,KitaevChain))\nPhZak=np.array(PhZak)\n\n\nfig, (ax1,ax2) = plt.subplots(2,figsize=(8, 8))\n\nax1.plot(M,PhZak.T[0])\nax1.set_xlabel('$\\mu/t$')\nax1.set_ylabel('Fase de Zak \\n (banda valencia)')\nax1.grid(True)\n\nax2.plot(M,PhZak.T[1])\nax2.set_xlabel('$\\mu/t$')\nax2.set_ylabel('Fase de Zak \\n (banda conducción)')\nax2.grid(True)\nax2.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#estados-de-borde",
    "href": "Kitaev_Chain.html#estados-de-borde",
    "title": "3  Cadena de Kitaev",
    "section": "3.3 Estados de borde",
    "text": "3.3 Estados de borde\n\nNL=50\nKC_Cortado=[KitaevChain[i].cut_piece(NL,0,glue_edgs=False) for i in range(Nμ)]\nKC_Cortado[1].visualize(0,1)\n\n\n\n\n\n\n\n\n\n# Obtenemos todos los estados\nevals,evecs,ed=[],[],[]\nfor i in range(Nμ):\n  Ek,evec=KC_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(KC_Cortado[i].get_num_orbitals()//2) # Energia al centro del espectro, debe corresponder con el edo de borde\nevals=np.array(evals)\n\n\ndef ipr(edo):\n  abs=np.absolute(edo)**2\n  C2=sum(abs**2)\n  C4=sum(abs**4)\n  return C4/C2\n\n\nIPR=[list(map(ipr,evecs[i])) for i in range(Nμ)]\n\n# Mostramos estados de borde\nfor i in range(0,Nμ,20):\n  (fig,ax)=KC_Cortado[i].visualize(0,1,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"μ=\"+str(M[i])+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\pythtb.py:734: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fig=plt.figure(figsize=[plt.rcParams[\"figure.figsize\"][0],",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "Kitaev_Chain.html#espectro-v.s.-mut",
    "href": "Kitaev_Chain.html#espectro-v.s.-mut",
    "title": "3  Cadena de Kitaev",
    "section": "3.4 Espectro v.s. \\(\\mu/t\\)",
    "text": "3.4 Espectro v.s. \\(\\mu/t\\)\n\ndef colorFader(c1,c2,mix=0): # Interpolación lineal del color c1 (en mix=0) al color c2 (mix=1)\n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Interpolación lineal de colores en lista Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\nfig, ax = plt.subplots(figsize=(10, 8))\nMax=np.max(np.max(IPR))\nMin=np.min(np.min(IPR))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nμ):\n    colors.append(Fader(Lc,(IPR[j][i]-Min)/(Max-Min)))\n  ax.scatter(M,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(10, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline((Max-Min)*x+Min, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.set_xlim(Min,Max)\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C)) # Hay que mejorar esta parte\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # Quitamos los que no contribuyen\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return SEE\n\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=sum([1 for ϵ in Ek if ϵ&lt;0]) # Numero de estados en mar de Fermi\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))\n  return ζ\n\n\nSee=list(map(EEntropy,KC_Cortado))\n\n\nfig, ax = plt.subplots(figsize=(9, 7))\nax.plot(M,See,c='black')\nax.set_xlabel('$\\mu/t$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entropia de entrelazamiento $S_A$')\nax.grid(True)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning: Casting complex values to real discards the imaginary part\n  return math.isfinite(val)\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1345: ComplexWarning: Casting complex values to real discards the imaginary part\n  return np.asarray(x, float)\n\n\n\n\n\n\n\n\n\n\nζ=np.array(list(map(C_Spectre,KC_Cortado)))\n\n\nfig, ax = plt.subplots(figsize=(10, 8))\nfor L in ζ.T:\n  ax.plot(M,L)\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$\\mu/t$')\n  ax.set_ylabel('Espectro de $C$')\n  ax.grid(True)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cadena de Kitaev</span>"
    ]
  },
  {
    "objectID": "SSH.html",
    "href": "SSH.html",
    "title": "2  SSH model",
    "section": "",
    "text": "2.1 Finite SSH chain\nIn order to study this fase transition we now consider a finite SSH chain.\nNL=50 # Longitud de cadena\nSSH_Cortado=[]\nfor i in range(Nt):\n  SSH_Cortado.append(SSH_model[i].cut_piece(NL,0,glue_edgs=False))\nSSH_Cortado[1].visualize(0)\nIn the next cell, we calculate all the eigenstates of the chain. To study the gap closure, we concentrate our attention on the state whose energy is closest to zero.\nevals,evecs,ed=[],[],[]\nfor i in range(Nt):\n  Ek,evec = SSH_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(SSH_Cortado[i].get_num_orbitals()//2)\nevals=np.array(evals)\nWe now visualize the evolution of the state with energy closest to zero when we vary the ratio \\(t_2/t_1\\). We can observe that for \\(|t_2/t_1|&lt;1\\) the state is localized near the edges of the chain and for \\(|t_2/t_1|\\geq1\\) this state is now unlocalized. In other words, for \\(|t_2/t_1|&lt;1\\) we observe an edge state and for \\(|t_2/t_1|\\geq1\\) it becomes a bulk state.\nfor i in range(0,Nt,50):\n  (fig,ax)=SSH_Cortado[i].visualize(0,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"$t_2$=\"+str(T2[i])+\"$t_1$\"+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#zaks-phase",
    "href": "SSH.html#zaks-phase",
    "title": "2  SSH model",
    "section": "2.4 Zak’s phase",
    "text": "2.4 Zak’s phase\nIn order to say that this is a topological phase transition we must asociate each phase with a \\(\\textit{topological invariant}\\). A prime example of a topological invariant is the also called the which is a quantity that describes how a global phase accumulates as some state \\(|\\psi\\rangle\\) is carried around a closed loop in a complex space. For example, if we consider a loop of states \\(\\{|\\psi_0\\rangle, |\\psi_1\\rangle , \\dots , |\\psi_N\\rangle\\}\\) where we set \\(|\\psi_0\\rangle=|\\psi_N\\rangle\\). The Berry phase for this discrete loop is defined as \\[\n\\phi=-\\arg( \\langle\\psi_0|\\psi_1\\rangle \\langle\\psi_1|\\psi_2\\rangle \\cdots \\langle\\psi_{N-1}|\\psi_0\\rangle ).\n\\]\nIt can be easily seen that \\(\\phi\\) is a gauge invariant to the transformation \\(|\\psi_n\\rangle\\rightarrow e^{i \\alpha_n} |\\psi_n\\rangle\\) because the ket \\(|\\psi_n\\rangle\\) will cancel the phase \\(e^{i \\alpha_n}\\) carried by the bra \\(\\langle \\psi_n |\\).\nThe Berry phase has a generalization for a continuous loop of states \\(\\{ |\\psi_\\lambda\\rangle ; \\:\\:\\lambda\\in[0,1] \\}\\) : \\[\n\\phi=\\oint \\langle u_\\lambda| i\\partial_\\lambda u_\\lambda\\rangle \\text{d}\\lambda\n\\]\nA proof of this expression can be found in Vanderbilt (2018).\nHere we will calculate Zak’s phase, which is defined as the Berry phase where \\(\\mathcal{C}\\) is the Brillouin Zone, which means \\[\n\\gamma=\\int_{-\\pi}^{\\pi} \\langle u_k^n| i \\partial_k |u_k^n\\rangle \\text{d} k,\n\\]\nwhere \\(u_k^n\\) is the amplitude of the Bloch wavefunction with crystaline momentum \\(k\\) associated with the \\(n\\)-th band.\n\ndef HamSSH(t1,t2): # We define the SSH hamiltonian in k space\n    def H(k):\n        H = np.array([[            0, t1+t2*exp(-1J*k)],\n                      [t1+t2*exp(1J*k),              0]])\n        return H\n    return H\n\ndef Zak(H): # Given the hamiltonian in k space, calculates the zak phase\n    kpath = np.linspace(-pi,pi,100,endpoint=False)\n    Ek,vk = eig(H(kpath[-1]))\n    uN    = vk.T[Ek&lt;0]\n    Ek,vk = eig(H(kpath[0]))\n    u0    = vk.T[Ek&lt;0]\n    Prod  = np.vdot(uN,u0)\n    un1   = u0\n    for k in kpath[1:]:\n        Ek,vk = eig(H(k))\n        un   = vk.T[Ek&lt;0]\n        Prod  = Prod*np.vdot(un1,un)\n        un1   = un\n    ϕ = -imag( log(Prod) )\n    if(ϕ&lt;-10**(-10)): ϕ=ϕ+2*np.pi # We use the log branch [0,2*pi) with 10 digits of resolution\n    return ϕ\n\nt2_path=np.linspace(-2,2,500)\nLzak=[Zak(HamSSH(1,t2)) for t2 in t2_path]\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.plot(t2_path,Lzak,c='green')\nax.set_xlabel('$t_2/t_1$')\nax.set_ylabel('Zak phase')\nax.grid(True)\n\n\n\n\n\n\n\n\n\n\n\n\nRyu, S., and Y. Hatsugai. 2006. “Entanglement Entropy and the Berry Phase in the Solid State.” Physical Review B 73 (24). https://doi.org/10.1103/physrevb.73.245115.\n\n\nSu, W. P., J. R. Schrieffer, and A. J. Heeger. 1979. “Solitons in Polyacetylene.” Phys. Rev. Lett. 42 (June): 1698–1701. https://doi.org/10.1103/PhysRevLett.42.1698.\n\n\nVanderbilt, David. 2018. Berry Phases in Electronic Structure Theory. First. Cambdridge University Press. https://doi.org/10.1017/9781316662205.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#finite-ssh-chain",
    "href": "SSH.html#finite-ssh-chain",
    "title": "2  SSH model",
    "section": "2.2 Finite SSH chain",
    "text": "2.2 Finite SSH chain\nIn order to study this fase transition we now consider a finite SSH chain.\n\nNL=50 # Longitud de cadena\nSSH_Cortado=[]\nfor i in range(Nt):\n  SSH_Cortado.append(SSH_model[i].cut_piece(NL,0,glue_edgs=False))\nSSH_Cortado[1].visualize(0)\n\n\n\n\n\n\n\n\nIn the next cell, we calculate all the eigenstates of the chain. To study the gap closure, we concentrate our attention on the state whose energy is closest to zero.\n\nevals,evecs,ed=[],[],[]\nfor i in range(Nt):\n  Ek,evec = SSH_Cortado[i].solve_all(eig_vectors=True)\n  evals.append(Ek)\n  evecs.append(evec)\n  ed.append(SSH_Cortado[i].get_num_orbitals()//2)\nevals=np.array(evals)\n\nWe now visualize the evolution of the state with energy closest to zero when we vary the ratio \\(t_2/t_1\\). We can observe that for \\(|t_2/t_1|&lt;1\\) the state is localized near the edges of the chain and for \\(|t_2/t_1|\\geq1\\) this state is now unlocalized. In other words, for \\(|t_2/t_1|&lt;1\\) we observe an edge state and for \\(|t_2/t_1|\\geq1\\) it becomes a bulk state.\n\nfor i in range(0,Nt,50):\n  (fig,ax)=SSH_Cortado[i].visualize(0,eig_dr=evecs[i][ed[i],:],draw_hoppings=True)\n  ax.set_title(\"$t_2$=\"+str(T2[i])+\"$t_1$\"+\"  E=\"+str(evals[i][ed[i]]))\n  ax.set_ylim(-5,5)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#ipr",
    "href": "SSH.html#ipr",
    "title": "2  SSH model",
    "section": "2.2 IPR",
    "text": "2.2 IPR\nWe now aim to understand the evolution of all the eigenstates of the chain. To achieve this, we use the Inverse Ratio Participation (IPR) which is defined as \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 / \\sum_{n=1}^{N} |\\psi_n|^2 \\label{eq : IPR}\n\\end{equation}\n\\]\nwhere \\(\\psi_n\\) is the amplitude of the wavefunction in the \\(n\\)-th site of the chain, which has \\(N\\) sites. Notice that if we asume \\(\\psi_n\\) is normalized, the term in the denominator is equal to 1.\nThe IPR is a simple way to quantify how many states a particle is distributed over a system. To see this, suppose that the particle is equally distributed over \\(M\\) sites, i.e., \\(|\\psi_n|^2=\\frac{1}{M}\\) for \\(n=1,...,M\\) and zero otherwise. In that case, \\[\n\\begin{equation}\n\\text{IPR}=\\sum_{n=1}^{N} |\\psi_n|^4 = \\sum_{n=1}^{M} \\frac{1}{M^2} = \\frac{1}{M}. \\label{eq : IPR-example}\n\\end{equation}\n\\]\nIf we asume that the particle is localized in one state, we see that \\(\\text{IPR}=1\\). In contrast, if we asume that the particle is distributed across every state in the system, then \\(\\text{IPR}=1/N\\), and in the thermodynamic limit, the IPR would tend to zero. A simple exercise of extremation shows that, assuming \\(\\psi_n\\) is normalized, then \\[\n\\begin{equation}\n\\frac{1}{N}\\leq \\text{IPR}\\leq 1\n\\end{equation}\n\\]\nwhich makes it a good way to measure the localization of a certain state.\nIn the next cell we calculate the IPR of all the eigenstates of our finite system.\n\nIPR=[]\nfor i in range(Nt):\n  IPR.append([])\n  for edo in evecs[i]:\n    C2=sum(np.absolute(edo)**2)\n    C4=sum(np.absolute(edo)**4)\n    IPR[i].append(C4/C2)\n\nWe now graph the evolution of the energy levels as a function of \\(t_2/t_1\\) and color them using the IPR.\n\ndef colorFader(c1,c2,mix=0): \n    c1=np.array(mpl.colors.to_rgb(c1))\n    c2=np.array(mpl.colors.to_rgb(c2))\n    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)\n\ndef Fader(Lc,mix): # Linear interpolation of colors in Lc\n    i=int(np.floor(mix*(len(Lc)-1)))\n    if i==len(Lc)-1:\n      c1,c2=Lc[-2],Lc[-1]\n      return c2\n    else:\n      c1,c2=Lc[i],Lc[i+1]\n      return colorFader(c1,c2,mix*(len(Lc)-1)-i)\n\nLc=['red','Blue']\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor i in range(2*NL): # Número de eigenestados\n  colors = []\n  for j in range(Nt):\n    colors.append(Fader(Lc,IPR[j][i]))\n  ax.scatter(T2,evals.T[i],c=colors,s=0.5)\n  #ax.set_facecolor(\"black\")\n  ax.set_xlabel('t2/t1')\n  ax.set_ylabel('E')\nfig, ax = plt.subplots(figsize=(7, 1))\nn=500\nfor x in linspace(0,1,n):\n    ax.axvline(x, color=Fader(Lc,x), linewidth=4)\n    ax.set_xlabel('IPR')\n    ax.tick_params(axis='y', which='both', left=False, labelleft=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe observe eigenstates with an IPR close to one and energy close to zero when \\(|t_2/t_1|&lt;1\\), indicating localized eigenstates with (almost) zero energy. For the remaining eigenstates, we observe an IPR very close to zero, which implies bulk states that we can associate with the Bloch states of the band structures calculated previously. While strictly speaking, in this system, there is no band structure as we have not imposed periodic boundary conditions, considering a long enough chain allows us to approximate the eigenstates of the bulk with the Bloch eigenfunctions of the band structure.\nNotice that in the previous example of Eq. \\(\\ref{eq: IPR-example}\\), we made no clear specification of the position of the sites in the system to which the particle was distributed. This means that the IPR cannot tell us if the localized eigenstates are edge states. To address this limitation, we turn to the entanglement entropy.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  },
  {
    "objectID": "SSH.html#entanglement-entropy",
    "href": "SSH.html#entanglement-entropy",
    "title": "2  SSH model",
    "section": "2.3 Entanglement entropy",
    "text": "2.3 Entanglement entropy\nConsider two systems \\(A\\) and \\(B\\) described by states \\(|\\phi^A\\rangle\\) and \\(|\\phi^B\\rangle\\) with their respective Hilbert space \\(\\mathcal{H}_A\\) and \\(\\mathcal{H}_B\\). Then, the compound system \\(A+B\\) is accurately described by the tensor-product \\(\\mathcal{H}_A\\otimes\\mathcal{H}_B\\) whose basis states are of the form \\(|\\phi^A\\rangle\\otimes|\\phi^B\\rangle\\). A state \\(|\\psi\\rangle\\) of the compound system is called pure if it can be written as \\(|\\psi\\rangle=|\\phi^A\\rangle\\otimes|\\phi^B\\rangle\\) for some \\(\\varphi_{A/B}\\in\\mathcal{H}_{A/B}\\). In any other case we call \\(|\\psi\\rangle\\) an entangled state. For example \\(|\\psi\\rangle=|\\phi^A_1\\rangle\\otimes|\\phi^B_1\\rangle+|\\phi^A_2\\rangle\\otimes|\\phi^B_2\\rangle\\) is in general an entangled state.\nConsider an entangled state \\(|\\psi^{AB}\\rangle\\), we can then expand it as \\[\n\\begin{equation}\n|\\psi^{AB}\\rangle=\\sum_{j=1}^d c_j |\\phi_j^{A}\\rangle\\otimes |\\phi_j^{B}\\rangle. \\label{eq : AB}\n\\end{equation}\n\\]\nEquation \\(\\ref{eq : AB}\\) is called the \\(\\textit{Schmidt decomposition}\\) of \\(|\\psi^{AB}\\rangle\\) where \\(d\\) is, at most, the dimension of the smaller subsystem. If we now wish to study only one of the subsystems, we can no longer describe it using a wave function because \\(|\\psi^{AB}\\rangle\\) is not pure. Instead we turn our attention to the density matrix \\(\\rho_{AB}=|\\psi^{AB}\\rangle\\langle\\psi^{AB}|\\) and calculate its reduced state on A and B by taking the \\(\\textit{parcial trace}\\) over the subsystem as \\[\n\\rho_A=\\text{Tr}_A(\\rho_{AB})\\equiv\\sum_{j=1}^d |c_j|^2 |\\phi_j^{A}\\rangle\\langle\\phi_j^{A}|,\n\\] \\[\n\\rho_B=\\text{Tr}_B(\\rho_{AB})\\equiv\\sum_{j=1}^d |c_j|^2 |\\phi_j^{B}\\rangle\\langle\\phi_j^{B}|.\n\\]\nThe physical reason why both \\(\\rho_A\\) and \\(\\rho_B\\) use the same probability distribution \\(p_j=|c_j|^2\\) stems from the fact that when we measure a particle in an entangled state, we colapse it to a state \\(|\\phi^{A}\\rangle\\otimes |\\phi^{B}\\rangle\\) with a probability \\(|c_j|^2\\). This probability sets the state of A and B at the same time, and since this occurs when we measure any observable associated with subsystem A or B, it means that the probability of measuring such a state is the same when the state is entangled. As a corollary, since both \\(\\rho_A\\) and \\(\\rho_B\\) have the same probabilities, they also have the same Von Neumann entropy. This defines the entanglement entropy as \\[\nS(\\rho_B)=S(\\rho_A)=-\\text{Tr}\\rho_A\\ln\\rho_A=-\\sum_{i} p_i \\ln p_i.\n\\]\nIn their paper (Ryu and Hatsugai (2006)) S.Ryu and Y.Hatsugai proposed that the entanglement entropy could be used to characterize edge states and, as a consequence, topological phases. They also propose a novel way to calculate it, by means of a \\(C\\) Hamiltonian which, for a bipartite system with chiral symmetry is defined as the restriction of the density matrix of the Fermi sea to a subsystem A.\nIn detail, we first calculate the eigenstates \\(\\psi_\\ell\\) with energy \\(\\epsilon_\\ell&lt;0\\), we then calculate the density matrix of the Fermi sea as, \\[\nP = \\sum_{\\epsilon_\\ell&lt;0} \\psi_\\ell \\psi_\\ell^{\\dagger},\n\\]\nand finaly we calculate the restriction of the P matrix to a subsystem. Notice that we have the liberty of defining the subsystems when we “cut” the density matrix: \\[\nP=\\begin{pmatrix}\nC & \\ast \\\\\n\\ast & \\ast\n\\end{pmatrix}\n\\]\nIn the next cell we calculate the eigenvalues of the \\(C\\) Hamiltonian for the SSH chain, in this case we define the subsystems as both halfs of the chain when we cut it right through the middle.\n\ndef C_Spectre(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # 2 level system\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=list(sort(np.linalg.eigvals(C)))\n  return ζ\n\nζ=np.array(list(map(C_Spectre,SSH_Cortado)))\n\n\nfig, ax = plt.subplots(figsize=(7, 6))\nfor L in ζ.T:\n  ax.scatter(T2,L,s=1,c='black')\n  ax.set_ylim(-0.1,1.1)\n  ax.set_xlabel('$t_2/t_1$')\n  ax.set_ylabel('Spectre of $C$')\n  ax.grid(True)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1699: ComplexWarning: Casting complex values to real discards the imaginary part\n  return math.isfinite(val)\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\collections.py:194: ComplexWarning: Casting complex values to real discards the imaginary part\n  offsets = np.asanyarray(offsets, float)\n\n\n\n\n\n\n\n\n\nNow, from its definition, \\(P\\) has only two eigenvalues, namely 0 and 1. The eigenvectors with eigenvalue 1 span the Fermi sea and hence offer\nSince \\(C\\) has, approximately, the same eigenvectors as \\(P\\)\nIf we then compute the eigenvalues of \\(C\\), we can calculate the entanglement entropy as \\[\nS_A=-\\sum_{\\ell} \\zeta_\\ell \\ln\\zeta_\\ell + (1-\\zeta_\\ell)\\ln(1-\\zeta_\\ell),\n\\]\nwhere \\(\\{\\zeta_\\ell\\}\\) are the eigenvalues of \\(C\\).\nIn this example we take advantge of the sublattice symettry of the SSH chain to calculate \\(S_A\\) in an equivalent form as \\[\nS_A=-2\\sum_{\\zeta_\\ell\\geq0.5} (\\zeta_\\ell \\log(\\zeta_\\ell) + (1-\\zeta_\\ell)\\log(1-\\zeta_\\ell)).\n\\]\n\ndef EEntropy(model):\n  Ek,evec=model.solve_all(eig_vectors=True)\n  nF=model.get_num_orbitals()//2 # Number of states on the Fermi sea\n  P=np.sum([evec[l][:,None]*np.conjugate(evec[l]) for l in range(nF)],0)\n  C=P[0:nF,0:nF]\n  ζ=sort(np.linalg.eigvals(C))[nF//2:nF] # Here we use chiral simmetry\n  ζ=np.array([z for z in ζ if(z!=0 and z!=1)]) # We remove the eigenvalues that dont contribute\n  SEE=-sum((1-ζ)*np.log(1-ζ)+ζ*np.log(ζ))\n  return 2*SEE\n\nSee=list(map(EEntropy,SSH_Cortado))\n\n\nfig, ax = plt.subplots(figsize=(7, 6))\nax.plot(T2,See,c='black')\nax.set_xlabel('$t_2/t_1$')\nax.axhline(2*np.log(2),c='red')\nax.set_ylabel('Entanglement entropy $S_A$')\nax.grid(True)\n\nc:\\Users\\gozu0\\Topological_Superconductors\\.conda\\Lib\\site-packages\\matplotlib\\cbook.py:1345: ComplexWarning: Casting complex values to real discards the imaginary part\n  return np.asarray(x, float)\n\n\n\n\n\n\n\n\n\nAccording to Ryu and Hatsugai, the entanglement entropy in the thermodynamic limit is greater or equal to \\(\\log 2\\) times the number of edges of the system. In this case we can see that \\(S_A\\) goes under this inferior limit \\(2\\ln 2\\) around \\(t_2=\\pm t_1\\) which means that the two edge states disapear in this limit.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH model</span>"
    ]
  }
]